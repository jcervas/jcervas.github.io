---
title: "Voter Fraud!? | A Reimagining of Precinct Matching for Analyzing Absentee Ballots in the 2020 Presidential Election"
author: "Sean J. Birch"
date: "DRAFT `r Sys.Date()`"
output:
  pdf_document: default
  html_document:
    df_print: paged
  word_document: default
header-includes: 
   - \usepackage{wrapfig}
   - \usepackage{caption}
---

\captionsetup[figure]{labelformat=empty}

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(include = FALSE)
knitr::opts_chunk$set(warning = FALSE)
```


```{r}
# Required packages
library(tidyverse)
library(sf)
library(dplyr)
library(rgeos)
library(rgdal)
library(gridExtra)
library(viridis)

library(pdftools)
library(readxl)
library(janitor)
library(stringr)

library(tidycensus)
tidycensus::census_api_key("5f98a6c74bd7ae588481b45d22d48b487611ab89")

library(stargazer)
```

# Allegheny, PA
## PA Precinct Matching
```{r }
# Setting parameters and loading spatial data: Allegheny County, Pennsylvania

county_shapefile <- "tl_2021_us_county"
precinct_shapefile <- "PA/PA_Precinct"
county_code <- "003"
State_fips <- 42
County_GEOID <- 42003
block_shapefile <- "PA/PA_Block"
block_data_file <- "PA/census_block_data_PA.xlsx" # Census block data file name

CRS <- 4326 # Doesn't appear to matter; but needs to be consistent for matching to work
poly2nb_snap <- 0.0005 # Tangent geometry snapping constant

us_county <- sf::st_read(county_shapefile) # County shape file for exterior matching
us_county_OGR <- sf::as_Spatial(us_county) # Spatial polygon copy needed for certain functions to work

State_Precinct <- sf::st_read(precinct_shapefile) # Loading precinct geometries: Pennsylvania

State_Precinct_County <- State_Precinct %>% # Subsetting specific county: Allegheny
    subset(COUNTYFP20 == county_code)
```

# Border Precincts Identification
```{r }
# Identify adjacent counties: tangent to Allegheny

us_county_state <- us_county %>% # Subsetting state's county level geometries: Pennsylvania
  subset(STATEFP == State_fips)
row.names(us_county_state) <- NULL # Row numbers needed to be resequenced

us_county_state_OGR <- us_county_OGR %>% # Subsetting state's county level geometries in Spatial polygon
  subset(STATEFP == State_fips)

us_county_state_Adjacent_Matrix <- us_county_state_OGR %>% # Create logical matrix of which geometries are tangent
  rgeos::gTouches(byid = TRUE)
rownames(us_county_state_Adjacent_Matrix) <- us_county_state$GEOID # IDs set to match County shapefile
colnames(us_county_state_Adjacent_Matrix) <- us_county_state$GEOID

Adjacent_County_Geometry <- us_county_state[which( # subsetted adjacent counties: tangent to Allegheny
  as.data.frame(us_county_state_Adjacent_Matrix)[,which(us_county_state$GEOID == County_GEOID)]
  ),] %>% 
  dplyr::select(GEOID, geometry, COUNTYFP) # Only necessary variables
row.names(Adjacent_County_Geometry) <- NULL

State_Precinct_County_GEO <- State_Precinct_County %>% # Standardized columns for combination
  dplyr::rename(GEOID = GEOID20, COUNTYFP = COUNTYFP20) %>%
  dplyr::select(GEOID, geometry, COUNTYFP)
row.names(State_Precinct_County_GEO) <- NULL

Adjacent_County_Geometry_crs <- st_transform(Adjacent_County_Geometry, crs = CRS) # crs transformation (prevents errors)
State_Precinct_County_GEO_crs <- st_transform(State_Precinct_County_GEO, crs = CRS)
```

```{r}
# Identifying and filtering interior precincts

Precinct_and_County_Spatial <- rbind(Adjacent_County_Geometry_crs, State_Precinct_County_GEO_crs) %>% 
  sf::as_Spatial() # Combine precinct and county files

Adjacent_List_Interior <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(Precinct_and_County_Spatial@polygons), 
                                         snap = poly2nb_snap) # Creates list of adjacent interior geometries

Num_Adjacent_County <- nrow(Adjacent_County_Geometry_crs) # poly2nb creates nested list for each polygon - Only need exterior
In_Index <- numeric()
for(i in 1:Num_Adjacent_County){ # loop through the first three sub-lists and combine indices
  In_Index <- c(In_Index, Adjacent_List_Interior[[i]])
}
In_Index <- In_Index[In_Index > Num_Adjacent_County] # Exterior counties removed

Precinct_Interior <- rbind(Adjacent_County_Geometry_crs, State_Precinct_County_GEO_crs)[In_Index,] # Filtering interior border precincts

ggplot() +
  geom_sf(data = Precinct_Interior, color = "black", fill = "gray90") +
  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  theme(legend.position = "none")
```

```{r }
# Selecting precincts in exterior counties

State_Precinct_County_GEO_Exterior <- State_Precinct %>% # Subset precincts in adjacent counties
  subset(COUNTYFP20 %in% Adjacent_County_Geometry$COUNTYFP) %>%
  dplyr::rename(GEOID = GEOID20, COUNTYFP = COUNTYFP20) %>%
  dplyr::select(GEOID, geometry, COUNTYFP)

us_county_Chosen <- us_county %>% # Select geometry of chosen County: Allegheny
  subset(GEOID == County_GEOID) %>%
  dplyr::select(GEOID, geometry, COUNTYFP)

ggplot() +
  geom_sf(data = State_Precinct_County_GEO_Exterior, color = "black", fill = NA) +
  geom_sf(data = us_county_Chosen, color = "red", fill = NA) +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  theme(legend.position = "none")
```

```{r }
# Identify and select exterior precincts

Precinct_and_County_Spatial <- rbind(us_county_Chosen, State_Precinct_County_GEO_Exterior) %>% 
  sf::as_Spatial() # Combine interior County with exterior precincts (In spatial format for matching)

Adjacent_List_Exterior <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(Precinct_and_County_Spatial@polygons), 
                                         snap = poly2nb_snap) # Create list of which geometries tangent which

Precinct_and_County_Spatial_sf <- rbind(us_county_Chosen, State_Precinct_County_GEO_Exterior) # Combine interior County with exterior precincts

Precinct_Exterior <- rbind(us_county_Chosen, State_Precinct_County_GEO_Exterior)[Adjacent_List_Exterior[[1]],] # Subset exterior border precincts (only first entry in list necessary: "[[1]],]")

ggplot() +
  geom_sf(data = Precinct_Exterior, color = "black", fill = "gray90") +
  geom_sf(data = subset(us_county,GEOID == County_GEOID), color = "red", fill = NA) +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  theme(legend.position = "none")
```

```{r }
# Create a precinct matching data frame from exterior and interior precincts

Precinct_Exterior_crs <- st_transform(Precinct_Exterior, crs = CRS) # Consistent CRS required for matching
Precinct_Interior_crs <- st_transform(Precinct_Interior, crs = CRS)

Precinct_Border_Spatial <- rbind(Precinct_Exterior_crs, Precinct_Interior_crs) %>% 
  sf::as_Spatial() # Combine interior and exterior precincts in spatial format for matching

Adjacent_List_Border <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(Precinct_Border_Spatial@polygons), 
                                         snap = poly2nb_snap) # Create adjacency list for exterior and interior precincts

Precinct_Relational_Data <- data.frame(Precinct1_Index = numeric(), Precinct2_Index = numeric())
for(i in 1:length(Adjacent_List_Border)){ # Create two columns in a data frame from the adjacency list
  County_temp_data <- data.frame(Precinct1_Index = Adjacent_List_Border[[i]])
  County_temp_data$Precinct2_Index <- i
  Precinct_Relational_Data <- rbind(Precinct_Relational_Data, County_temp_data)
}

Precinct_Border_crs <- rbind(Precinct_Exterior_crs, Precinct_Interior_crs) # Combine interior and exterior precincts

Precinct_County_Key <- State_Precinct %>% # Create a key of which precincts belong to which County
  as.data.frame() %>% #                     (the same as Precinct_Border_crs but has different IDs)
  dplyr::select(COUNTYFP20, GEOID20) %>% 
  dplyr::rename(GEOID = GEOID20)
Precinct_County_Key <- Precinct_Border_crs %>% 
  dplyr::left_join(Precinct_County_Key, by = "GEOID") %>% 
  as.data.frame() %>% 
  dplyr::select(COUNTYFP20, GEOID)

# Converting index numbers into GEOID and county IDs
Precinct_Relational_Data$Precinct1_CountyCode <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct1_Index),1]
Precinct_Relational_Data$Precinct2_CountyCode <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct2_Index),1]
Precinct_Relational_Data$Precinct1 <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct1_Index),2]
Precinct_Relational_Data$Precinct2 <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct2_Index),2]

Precinct_Match_Data <- Precinct_Relational_Data %>% # Create data frame of matching precincts
  subset(Precinct1_CountyCode != Precinct2_CountyCode) %>% # Filtering out inter-county tangents
  subset(Precinct1_CountyCode == county_code | Precinct2_CountyCode == county_code)  %>% # Filtering border tangents that are not of County of interest
  base::subset(Precinct2_CountyCode == county_code) # Remove duplicate marches

plot_PA_Precinct_Border_example <- ggplot() +
  geom_sf(data = Precinct_Exterior, color = "black", fill = "#d59d9e") +
  geom_sf(data = Precinct_Interior, color = "black", fill = "dodgerblue2") +
  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  ggtitle("Allegheny County, Pennsylvania") +
  labs(caption = "Figure i") +
  theme(legend.position = "none", plot.title = element_text(hjust = 0.5, size=35),
        plot.caption = element_text(hjust = 0.5, size=20))

plot_PA_Precinct_Border_example
```

# Border Precinct Centroid & Lines Creation
```{r warning=FALSE, }
# Precinct centroids and cross County matching lines creation

Precinct_Centroid <- rbind(st_transform(Precinct_Exterior, crs = CRS), st_transform(Precinct_Interior, crs = CRS)) %>% 
  dplyr::select(GEOID, geometry) %>%
  mutate(geometry = st_point_on_surface(geometry)) # Convert border precinct shapes into centroids

df <- Precinct_Match_Data %>% # Adding centroid data to data frame of matching precincts
  left_join(Precinct_Centroid, by = c("Precinct1" = "GEOID")) %>% 
  left_join(Precinct_Centroid, by = c("Precinct2" = "GEOID"))
mach_lines <- st_sfc(mapply(function(a,b){st_cast(st_union(a,b),"LINESTRING")}, # Create lines spanning between precinct pairs
                                df$geometry.x, df$geometry.y, SIMPLIFY=FALSE), crs = CRS)

plot_PA_Precinct_mach_lines <- ggplot() +
  geom_sf(data = Precinct_Exterior, color = "black", fill = "gray90") +
  geom_sf(data = Precinct_Interior, color = "black", fill = "gray80") +
  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
  geom_sf(data = mach_lines, color = "blue", fill = "gray90") +
  geom_sf(data = Precinct_Centroid, color = "black", fill = "gray90") +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  ggtitle("Allegheny")+
  theme(legend.position = "none")

plot_PA_Precinct_mach_lines
```

# Wall Test Precinct Centroid & Lines Creation
```{r}
# Precinct centroids and recessed County matching lines creation

State_Precinct_County_Spatial <- State_Precinct_County %>% # Convert County precincts into spatial format for matching
  sf::as_Spatial()
Adjacent_Precinct_County <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(State_Precinct_County_Spatial@polygons), 
                                         snap = poly2nb_snap) # Create adjacency list for County precincts

length_index <- sapply(Adjacent_Precinct_County, length) # Convert index of list into column for data frame
length_index_vec <- numeric(0)
for (i in 1:length(length_index)) {
  vec <- numeric(length_index[i])
  vec[1:length_index[i]] <- i
  length_index_vec <- c(length_index_vec, vec)
}

Adjacent_Precinct_County_Wall <- Adjacent_Precinct_County %>% # Create adjacency data frame for recessed precincts
  unlist() %>% 
  cbind(length_index_vec) %>% # Fully convert adjacency list into two columns
  as.data.frame() %>% 
  janitor::clean_names() %>% 
  dplyr::rename(GEOID_B = x, GEOID_C = length_index_vec) %>%
  dplyr::mutate(GEOID_B = State_Precinct_County$GEOID20[GEOID_B],
                GEOID_C = State_Precinct_County$GEOID20[GEOID_C]) %>% # Replace row IDs with precinct GEOIDs
  base::subset(GEOID_B %in% Precinct_Interior$GEOID) %>% # Define first column as only including border precincts
  base::subset(!GEOID_C %in% Precinct_Interior$GEOID) # Remove border precincts from second column

Precinct_Centroid_2nd <- rbind(st_transform(subset(State_Precinct_County,
                                                   GEOID20 %in% unique(Adjacent_Precinct_County_Wall$GEOID_C)), crs = CRS), 
                           st_transform(subset(State_Precinct_County, 
                                               GEOID20 %in% unique(Adjacent_Precinct_County_Wall$GEOID_B)), crs = CRS)) %>% 
  dplyr::select(GEOID20, geometry) %>%
  mutate(geometry = st_point_on_surface(geometry)) # Convert recessed precinct shapes into centroids

df <- Adjacent_Precinct_County_Wall %>%  # Adding centroid data to data frame of matching precincts
  left_join(Precinct_Centroid_2nd, by = c("GEOID_B" = "GEOID20")) %>% 
  left_join(Precinct_Centroid_2nd, by = c("GEOID_C" = "GEOID20"))
mach_lines_2nd <- st_sfc(mapply(function(a,b){st_cast(st_union(a,b),"LINESTRING")}, # Create lines between precinct pairs
                                df$geometry.x, df$geometry.y, SIMPLIFY=FALSE), crs = CRS)

plot_PA_Precinct_mach_lines <- ggplot() +
  geom_sf(data = subset(State_Precinct_County, GEOID20 %in% unique(Adjacent_Precinct_County_Wall$GEOID_C)), 
          color = "black", fill = "dodgerblue4") +
  geom_sf(data = Precinct_Exterior, color = "black", fill = "#d59d9e") +
  geom_sf(data = Precinct_Interior, color = "black", fill = "dodgerblue2") +
  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
  geom_sf(data = mach_lines_2nd, color = "magenta3") +
  geom_sf(data = Precinct_Centroid_2nd, color = "gray15") +
  geom_sf(data = mach_lines, color = "deepskyblue1") +
  geom_sf(data = Precinct_Centroid, color = "gray15") +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  ggtitle("Allegheny County, Pennsylvania") +
  labs(caption = "Figure iii") +
  theme(legend.position = "none", plot.title = element_text(hjust = 0.5, size=35),
        plot.caption = element_text(hjust = 0.5, size=20))
plot_PA_Precinct_mach_lines
```

```{r}
# Aggregate block level census data to precinct level

All_COUNTYFP <- unique(Precinct_Border_crs$COUNTYFP) # Vector of all county codes
Wall_conglomerate_Precinct <- State_Precinct %>% # Select precincts in all counties
  base::subset(COUNTYFP20 %in% All_COUNTYFP) %>% 
  st_transform(crs = CRS) %>% 
  dplyr::rename(GEOID = GEOID20, COUNTYFP = COUNTYFP20)

census_block_variables <- c("P3_001N", "P3_004N", "P3_006N", "P4_002N", "P3_009N") # Census block variables for aggregation
tot_pop_var <- "P3_001N"
# tidycensus::get_decennial(geography = "block", # Un-comment to re-download data
#                     variables = census_block_variables, 
#                     year = 2020,
#                     # summary_var = "P001001", 
#                     state = "42", 
#                     county = All_COUNTYFP, 
#                     geometry = FALSE) %>% 
#   pivot_wider(names_from = variable,
#               values_from = c(value)) %>% 
#   openxlsx::write.xlsx(file = block_data_file, rowNames = FALSE, overwrite = TRUE)
census_block_data <- read_excel(block_data_file) %>% # Read census data
  dplyr::select(c("GEOID", census_block_variables))

sf::sf_use_s2(FALSE) # This is required to fix an error (does not appear to affect results)
County_blocks <- sf::st_read(block_shapefile) %>%
  dplyr::rename(GEOID20_census = GEOID20) %>% 
  right_join(census_block_data, by = c("GEOID20_census" = "GEOID")) %>% # Combine Census data with block geography
  base::subset(COUNTYFP20 %in% All_COUNTYFP) %>% # Select blocks for all relevant counties
  st_transform(crs = CRS) %>% 
  dplyr::mutate(area_original = st_area(geometry)) # Measure the original area of the blocks

Block_overlap <- sf::st_intersection(Wall_conglomerate_Precinct, County_blocks) %>% # Area Calculation
  dplyr::mutate(area_modified = st_area(geometry), area_multiplier = as.numeric(area_modified / area_original)) %>%
  sf::st_drop_geometry() # Trims blocks into respective precincts and assigns precinct ID to block
Block_overlap$area_multiplier[Block_overlap$area_multiplier > 1] <- 1 # Fixes apparent rounding error
Block_overlap[census_block_variables] <- Block_overlap[,census_block_variables] * Block_overlap[,"area_multiplier"] # Adjusts variables by proportion of precinct overlap

Block_overlap_summarise <- Block_overlap %>% # Sum blocks to precinct level
  dplyr::group_by(GEOID) %>% 
  dplyr::summarise_at(vars(census_block_variables), sum, na.rm = TRUE) %>% 
  right_join(Wall_conglomerate_Precinct, by = "GEOID") %>% 
  as.data.frame()
RA_list <- census_block_variables[census_block_variables != tot_pop_var] # Convert variables into percent of population
Block_overlap_summarise[RA_list] <- Block_overlap_summarise[,RA_list] / Block_overlap_summarise[,tot_pop_var]

ggplot() +
  geom_sf(data = Block_overlap_summarise, color = "black", aes(fill = P3_001N, geometry = geometry)) +
  geom_sf(data = subset(us_county, GEOID %in% c("42129", "42019", "42007", "42125", "42003")), color = "red", fill = NA) +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = FALSE)+
  theme(legend.position = "none")
```

```{r}
# IS JUST "Precinct_Match_Data"
length_index <- sapply(Adjacent_List_Border, length)

length_index_vec <- numeric(0)

for (i in 1:length(length_index)) {
  vec <- numeric(length_index[i])
  vec[1:length_index[i]] <- i
  length_index_vec <- c(length_index_vec, vec)
}

Adjacent_Border <- Adjacent_List_Border %>% 
  unlist() %>% 
  cbind(length_index_vec) %>% 
  as.data.frame() %>% 
  janitor::clean_names() %>% 
  dplyr::rename(GEOID_A = x, GEOID_B = length_index_vec) %>% 
  dplyr::mutate(COUNTY_A = Precinct_Border_Spatial$COUNTYFP[GEOID_A],
                COUNTY_B = Precinct_Border_Spatial$COUNTYFP[GEOID_B],
                GEOID_A = Precinct_Border_Spatial$GEOID[GEOID_A], 
                GEOID_B = Precinct_Border_Spatial$GEOID[GEOID_B]) %>% 
  base::subset(COUNTY_A != COUNTY_B) %>% 
  base::subset(COUNTY_B == county_code)
```

## Absentee data
```{r}
# Translation tables
Allegheny_Translation <- readxl::read_excel("PA/Absentee/Translation_Tables/Allegheny_Translation.xlsx") %>% 
  dplyr::rename(precinct = voter) %>% 
  dplyr::mutate(County = "Allegheny") %>% 
  dplyr::select(c("precinct", "County", "Border", "VTDST20"))
Beaver_Translation <- readxl::read_excel("PA/Absentee/Translation_Tables/Beaver_Translation.xlsx") %>% 
  dplyr::rename(precinct = voter) %>% 
  dplyr::mutate(County = "Beaver") %>% 
  dplyr::select(c("precinct", "County", "Border", "VTDST20"))
Butler_Table <- readxl::read_excel("PA/Absentee/Translation_Tables/Butler_Table.xlsx") %>% 
  dplyr::rename(precinct = voter) %>% 
  dplyr::mutate(County = "Butler") %>% 
  dplyr::select(c("precinct", "County", "Border", "VTDST20"))
Washington_Translation <- readxl::read_excel("PA/Absentee/Translation_Tables/Washington_Translation.xlsx") %>% 
  dplyr::rename(precinct = voter) %>% 
  dplyr::mutate(County = "Washington") %>% 
  dplyr::select(c("precinct", "County", "Border", "VTDST20"))
Westmoreland_Translation <- readxl::read_excel("PA/Absentee/Translation_Tables/Westmoreland_Translation.xlsx") %>% 
  dplyr::rename(precinct = voter) %>% 
  dplyr::mutate(County = "Westmoreland") %>% 
  dplyr::select(c("precinct", "County", "Border", "VTDST20"))

Translation <- dplyr::bind_rows(Allegheny_Translation, 
                                Beaver_Translation, 
                                Butler_Table, 
                                Washington_Translation, 
                                Westmoreland_Translation)
rm(Allegheny_Translation, Beaver_Translation, Butler_Table, Washington_Translation, Westmoreland_Translation)
```

```{r}
# Allegheny_Absentee <- Allegheny_Absentee %>% 
#   mutate(Porp_Absentee = (jb_absentee + dt_absentee + ind_absentee + wi_absentee) / total,
#          Porp_Trump = dt_total_votes / total)
# Allegheny_Absentee$County <- "Allegheny"
# 
# Butler_Absentee$Porp_Absentee <- Butler_Absentee$Total_mail / Butler_Absentee$Total_total
# Butler_Absentee$Porp_Trump <- Butler_Absentee$DT_total / Butler_Absentee$Total_total
# Butler_Absentee$County <- "Butler"
# 
# Washington_Absentee$Porp_Absentee <- Washington_Absentee$Total_mail / Washington_Absentee$Total_total
# Washington_Absentee$Porp_Trump <- Washington_Absentee$DT_total / Washington_Absentee$Total_total
# Washington_Absentee$County <- "Washington"
# 
# Westmoreland_Absentee <- Westmoreland_Absentee %>% 
#   mutate(Porp_Absentee = (jb_absentee + dt_absentee + ind_absentee + wi_absentee) / total,
#          Porp_Trump = dt_total_votes / total)
# Westmoreland_Absentee$County <- "Westmoreland"
# 
# Beaver_Absentee <- Beaver_Absentee %>% 
#   mutate(total = ballots_cast_election_day + ballots_cast_absentee + ballots_cast_provisional + blank_ballots_election_day, 
#          Porp_Absentee = (jb_absentee + dt_absentee + ind_absentee) / total,
#          Porp_Trump = (dt_election_day + dt_absentee + dt_provisional) / total)
# Beaver_Absentee$County <- "Beaver"
# 
# Butler_Absentee <- Butler_Absentee %>% 
#   dplyr::rename(precinct = Precinct)
# Washington_Absentee <- Washington_Absentee %>% 
#   dplyr::rename(precinct = Precinct)
# 
# Conglomerate_Absentee <- dplyr::bind_rows(
#   dplyr::select(Allegheny_Absentee, c("precinct", "Porp_Absentee", "Porp_Trump", "County")),
#                                dplyr::select(Butler_Absentee, c("precinct", "Porp_Absentee", "Porp_Trump", "County")),
#                                dplyr::select(Washington_Absentee, c("precinct", "Porp_Absentee", "Porp_Trump", "County")),
#                                dplyr::select(Westmoreland_Absentee, c("precinct", "Porp_Absentee", "Porp_Trump", "County")),
#                                dplyr::select(Beaver_Absentee, c("precinct", "Porp_Absentee", "Porp_Trump", "County")))

Conglomerate_Absentee <- read_excel("PA/Allegheny_Conglomerate_Absentee.xlsx") %>% 
  mutate(Porp_Absentee = total_absentee / total_votes,
         Porp_Trump = (dt_election_day + dt_absentee + dt_provisional) / total_votes,
         Porp_Trump_Absentee = dt_absentee / total_absentee)
Conglomerate_Absentee_variables <- c("Porp_Absentee", "Porp_Trump", "Porp_Trump_Absentee")

Conglomerate_Absentee <- Conglomerate_Absentee %>% 
  dplyr::left_join(Translation, by = c("County", "precinct"))

ggplot()+
  geom_point(aes(y = Porp_Trump_Absentee, x = Porp_Absentee, color = County), data = Conglomerate_Absentee)+
  geom_smooth(aes(y = Porp_Trump_Absentee, x = Porp_Absentee, color = County), data = Conglomerate_Absentee, 
              method = 'lm', formula = y ~ x)+
  geom_point(aes(x = Porp_Trump, y = Porp_Absentee, color = County),
             data = subset(Conglomerate_Absentee, Border == "Border"))+
  geom_point(aes(x = Porp_Trump, y = Porp_Absentee), color = "yellow", shape = 1,
             data = subset(Conglomerate_Absentee, Border == "Border"))+
  theme_light()+
  ggtitle("Absentee % Vs Trump Vote; Allegheny & Surrounding Counties, Pennsylvania")+
  labs(y = "% Total Votes Mailed In", 
       x = "% Votes for Trump Out of Total",
       subtitle = "By Precinct, 2020 Presidential Election",
       caption = quote(NULL))+
  scale_colour_manual(values=c("darkblue", "darkorange3" ,"coral","firebrick1","firebrick4"))
```

```{r}
Conglomerate_Absentee_data <- Conglomerate_Absentee %>% 
  dplyr::mutate(County_CAP = toupper(County)) %>% 
  dplyr::left_join(dplyr::select(sf::st_drop_geometry(State_Precinct), c("VTDST20", "GEOID20", "CTYNAME")),
                   by = c("County_CAP" = "CTYNAME", "VTDST20")) %>% 
  dplyr::left_join(dplyr::select(Block_overlap_summarise, c("GEOID", census_block_variables)),
                   by = c("GEOID20" = "GEOID")) %>% 
  dplyr::distinct(GEOID20, .keep_all = TRUE)

Conglomerate_Absentee_Border <- Conglomerate_Absentee_data %>% 
  subset(Border == "Border") %>% 
    mutate(Border_lm = replace(Border, is.na(Border), "Interior"), 
           County_lm = replace(County, County != "Allegheny", "Exterior"))

plot_PA_Porp_Trump_Porp_Absentee <- ggplot(Conglomerate_Absentee_Border, 
                                           aes(x = Porp_Trump, y = Porp_Absentee, color = County_lm))+
  geom_smooth(method = 'lm', formula = y ~ poly(x, 1))+
  geom_point()+
  theme_light()+
  ggtitle("Figure 1: Absentee % Vs Trump Vote; Allegheny & Surrounding County Border Precincts")+
  labs(y = "% of Mail-In Ballots out of Total Ballots Cast", 
       x = "% of Votes for Trump out of Total Ballots Cast",
       subtitle = "2020 Presidential Election",
       caption = quote(NULL),
       color = "Border Precincts")+
  scale_colour_manual(values=c("darkblue", "firebrick1"))+
  scale_y_continuous(labels = scales::percent)+
  scale_x_continuous(labels = scales::percent)+
  theme(legend.position='top')
plot_PA_Porp_Trump_Porp_Absentee

# lm_PU1
lm_PU1_1 <- lm(Porp_Absentee ~ Porp_Trump * County_lm, 
             data = Conglomerate_Absentee_Border)
lm_PU1_2 <- lm(Porp_Absentee ~ Porp_Trump * County_lm + P3_004N + P3_006N + P4_002N + P3_009N, 
             data = Conglomerate_Absentee_Border)

stargazer(lm_PU1_1, lm_PU1_2,
          header = FALSE, model.numbers = FALSE, 
          # dep.var.labels = ":)",
          # covariate.labels = c("Porp Trump",
          #                      "Exterior Effect", 
          #                      "P3 004N", "P3 006N", "P4 002N",  "P3 009N", 
          #                      "Exterior slope", 
          #                      "Constant"),
          type = 'text')

plot_PA_Porp_Absentee_Porp_Trump_Absentee <- ggplot(Conglomerate_Absentee_Border, 
                                           aes(x = Porp_Absentee, y = Porp_Trump_Absentee, color = County_lm))+
  # geom_smooth(method = 'loess', formula = y ~ x)+
  geom_smooth(method = 'lm', formula = y ~ x, se = TRUE)+
  geom_point()+
  theme_light()+
  ggtitle("Figure 2: Trump Absentee Share Vs Absentee %; Allegheny & Surrounding County Border Precincts")+
  labs(y = "% of Mail-In Ballots for Trump",
       x = "% of Mail-In Ballots out of Total Ballots Cast",
       subtitle = "2020 Presidential Election",
       caption = quote(NULL),
       color = "Border Precincts")+
  scale_colour_manual(values=c("darkblue", "firebrick1"))+
  scale_y_continuous(labels = scales::percent)+
  scale_x_continuous(labels = scales::percent)+
  theme(legend.position='top')
plot_PA_Porp_Absentee_Porp_Trump_Absentee

# lm_PU2
lm_PU2_1 <- lm(Porp_Trump_Absentee ~ Porp_Absentee * County_lm, data = Conglomerate_Absentee_Border)

lm_PU2_2 <- lm(Porp_Trump_Absentee ~ Porp_Absentee * County_lm + P3_004N + P3_006N + P4_002N + P3_009N, 
             data = Conglomerate_Absentee_Border)

stargazer(lm_PU2_1, lm_PU2_2,
          header = FALSE, model.numbers = FALSE, 
          # dep.var.labels = ":)",
          # covariate.labels = c("Porp Trump",
          #                      "Exterior Effect", 
          #                      "P3 004N", "P3 006N", "P4 002N",  "P3 009N", 
          #                      "Exterior slope", 
          #                      "Constant"),
          type = 'text')
```

## Match analysis
```{r }
mach_O <- Conglomerate_Absentee_data %>% 
  dplyr::select(c("GEOID20", Conglomerate_Absentee_variables, census_block_variables)) %>% 
  dplyr::right_join(dplyr::select(Adjacent_Border, GEOID_A), by = c("GEOID20" = "GEOID_A")) %>% 
  dplyr::select(!GEOID20)

mach_I <- Conglomerate_Absentee_data %>% 
  dplyr::select(c("GEOID20", Conglomerate_Absentee_variables, census_block_variables)) %>% 
  dplyr::right_join(dplyr::select(Adjacent_Border, GEOID_B), by = c("GEOID20" = "GEOID_B")) %>% 
  dplyr::select(!GEOID20)

Precinct_match_data <- (mach_I - mach_O) %>% na.omit

ggplot()+
  geom_point(aes(x = Porp_Trump, y = Porp_Absentee), data = Precinct_match_data)+
  geom_smooth(aes(x = Porp_Trump, y = Porp_Absentee), data = Precinct_match_data, 
              method = 'lm', formula = y ~ x)+
  theme_light()+
  ggtitle("Absentee % Vs Trump Vote; Allegheny & Surrounding Counties, Pennsylvania")+
  labs(y = "% Total Votes Mailed In", 
       x = "% Votes for Trump Out of Total",
       subtitle = "By Precinct, 2020 Presidential Election",
       caption = quote(NULL))
  # scale_colour_manual(values=c("darkblue", "darkorange3" ,"coral","firebrick1","firebrick4"))

lm(Porp_Absentee ~ Porp_Trump + P3_004N + P3_006N + P4_002N + P3_009N, data = Precinct_match_data) %>% summary

# Precinct_match_data %>% names
```

## PA Berlin Wall Test (Precinct)
```{r }
State_Precinct_County_Spatial <- State_Precinct_County %>% 
  sf::as_Spatial()

Adjacent_Precinct_County_Wall <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(State_Precinct_County_Spatial@polygons), 
                                         snap = poly2nb_snap)

# precinct matching pairs
length_index <- sapply(Adjacent_Precinct_County_Wall, length)

length_index_vec <- numeric(0)

for (i in 1:length(length_index)) {
  vec <- numeric(length_index[i])
  vec[1:length_index[i]] <- i
  length_index_vec <- c(length_index_vec, vec)
}

Adjacent_Precinct_County_Wall <- Adjacent_Precinct_County_Wall %>% 
  unlist() %>% 
  cbind(length_index_vec) %>% 
  as.data.frame() %>% 
  janitor::clean_names() %>% 
  dplyr::rename(GEOID_B = x, GEOID_C = length_index_vec) %>%
  dplyr::mutate(GEOID_B = State_Precinct_County$GEOID20[GEOID_B],
                GEOID_C = State_Precinct_County$GEOID20[GEOID_C]) %>% 
  base::subset(GEOID_B %in% Precinct_Interior$GEOID) %>% 
  base::subset(!GEOID_C %in% Precinct_Interior$GEOID)

# Centroid initialization
Precinct_Centroid_2nd <- rbind(st_transform(subset(State_Precinct_County, 
                                                   GEOID20 %in% unique(Adjacent_Precinct_County_Wall$GEOID_C)), crs = CRS), 
                           st_transform(subset(State_Precinct_County, 
                                               GEOID20 %in% unique(Adjacent_Precinct_County_Wall$GEOID_B)), crs = CRS)) %>% 
  dplyr::select(GEOID20, geometry) %>%
  mutate(geometry = st_point_on_surface(geometry))

df <- Adjacent_Precinct_County_Wall %>% 
  left_join(dplyr::rename(Precinct_Centroid_2nd, GEOID_B = GEOID20), by = c("GEOID_B")) %>% 
  left_join(dplyr::rename(Precinct_Centroid_2nd, GEOID_C = GEOID20), by = c("GEOID_C"))

mach_lines_2nd <- st_sfc(mapply(function(a,b){st_cast(st_union(a,b),"LINESTRING")}, 
                                df$geometry.x, df$geometry.y, SIMPLIFY=FALSE), crs = CRS)


plot_PA_Precinct_mach_lines <- ggplot() +
  geom_sf(data = subset(State_Precinct_County, GEOID20 %in% unique(Adjacent_Precinct_County_Wall$GEOID_C)), 
          color = "black", fill = "dodgerblue4") +
  geom_sf(data = Precinct_Exterior, color = "black", fill = "#d59d9e") +
  geom_sf(data = Precinct_Interior, color = "black", fill = "dodgerblue2") +
  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
  geom_sf(data = mach_lines_2nd, color = "magenta3") +
  geom_sf(data = Precinct_Centroid_2nd, color = "gray15") +
  geom_sf(data = mach_lines, color = "deepskyblue1") +
  geom_sf(data = Precinct_Centroid, color = "gray15") +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  ggtitle("Allegheny County, Pennsylvania") +
  labs(caption = "Figure iii") +
  theme(legend.position = "none", plot.title = element_text(hjust = 0.5, size=35),
        plot.caption = element_text(hjust = 0.5, size=20))
  # ggsave("Line_Match_2nd.png", width = 50, height = 50, units = "cm")
plot_PA_Precinct_mach_lines

# plot_GA_Precinct_mach_lines <- ggplot() +
#   geom_sf(data = Precinct_All_match, aes(fill = geometry_color), color = "black") +
#   geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
#   geom_sf(data = mach_lines_2nd, color = "magenta3") +
#   geom_sf(data = Precinct_Centroid_2nd, color = "gray15") +
#   geom_sf(data = mach_lines, color = "deepskyblue1") +
#   geom_sf(data = Precinct_Centroid, color = "gray15") +
#   coord_sf()+
#   theme_void()+
#   scale_fill_manual(values=c("#d59d9e", "dodgerblue2", "dodgerblue4", "#4b78bc"))+
#   
#   theme(legend.position = "none", plot.title = element_text(hjust = 0.5, size=35))


# Adjacent_Precinct_County_Wall

mach_2nd <- Conglomerate_Absentee_data %>% 
  dplyr::select(c("GEOID20", Conglomerate_Absentee_variables, census_block_variables)) %>% 
  dplyr::right_join(dplyr::select(Adjacent_Precinct_County_Wall, GEOID_C), by = c("GEOID20" = "GEOID_C")) %>% 
  dplyr::select(!GEOID20)

mach_I_2 <- Conglomerate_Absentee_data %>% 
  dplyr::select(c("GEOID20", Conglomerate_Absentee_variables, census_block_variables)) %>% 
  dplyr::right_join(dplyr::select(Adjacent_Precinct_County_Wall, GEOID_B), by = c("GEOID20" = "GEOID_B")) %>% 
  dplyr::select(!GEOID20)

Precinct_match_data_2nd <- (mach_I_2 - mach_2nd) %>% na.omit

ggplot()+
  geom_point(aes(x = Porp_Trump, y = Porp_Absentee), data = Precinct_match_data_2nd)+
  geom_smooth(aes(x = Porp_Trump, y = Porp_Absentee), data = Precinct_match_data_2nd, 
              method = 'lm', formula = y ~ x)+
  theme_light()+
  ggtitle("Absentee % Vs Trump Vote; Allegheny & Surrounding Counties, Pennsylvania")+
  labs(y = "% Total Votes Mailed In", 
       x = "% Votes for Trump Out of Total",
       subtitle = "By Precinct, 2020 Presidential Election",
       caption = quote(NULL))
  # scale_colour_manual(values=c("darkblue", "darkorange3" ,"coral","firebrick1","firebrick4"))

lm(Porp_Absentee ~ Porp_Trump + P3_004N + P3_006N + P4_002N + P3_009N, data = Precinct_match_data_2nd) %>% summary



ggplot() +

  geom_sf(data = State_Precinct_County_GEO, color = "black", fill = "gray90") +
  coord_sf()+
  theme_void()+
  scale_fill_viridis(discrete = TRUE)+
  theme(legend.position = "none")

Precinct_match_data$ring <- "1st"
Precinct_match_data_2nd$ring <- "2nd"

Precinct_match_data_3rd <- rbind(Precinct_match_data, Precinct_match_data_2nd)

Precinct_match_data_3rd$ring <- factor(Precinct_match_data_3rd$ring, 
                                       levels = c("1st", "2nd"),
                                      labels = c("Exterior", "Recessed"))

plot_PA_Diff_Porp_Trump_Porp_Absentee <- ggplot()+
  geom_point(aes(x = Porp_Trump, y = Porp_Absentee, color = ring), data = Precinct_match_data_3rd)+
  geom_smooth(aes(x = Porp_Trump, y = Porp_Absentee, color = ring), data = Precinct_match_data_3rd, 
              method = 'lm', formula = y ~ x)+
  theme_light()+
  ggtitle("Figure 5: Difference in Absentee % Vs Trump Share; Allegheny Exterior & Recessed Paired Precincts")+
  labs(y = "Difference in % of Mail-In Ballots out of Total Ballots Cast", 
       x = "Difference in % of Mail-In Ballots for Trump out of Total Ballots Cast",
       subtitle = "Across Adjacent Precincts, 2020 Presidential Election",
       caption = quote(NULL),
       color = "Precinct Difference")+
  scale_y_continuous(labels = scales::percent)+
  scale_x_continuous(labels = scales::percent)+
  scale_colour_manual(values=c("#c84c42", "#417ddd"))+
  theme(legend.position='top')
plot_PA_Diff_Porp_Trump_Porp_Absentee

# lm_PD1
lm_PD1_1 <- lm(Porp_Absentee ~ Porp_Trump * ring, 
             data = Precinct_match_data_3rd)
lm_PD1_2 <- lm(Porp_Absentee ~ Porp_Trump * ring + P3_004N + P3_006N + P4_002N + P3_009N, 
             data = Precinct_match_data_3rd)

stargazer(lm_PD1_1, lm_PD1_2,
          header = FALSE, model.numbers = FALSE, 
          # dep.var.labels = ":)",
          # covariate.labels = c("Porp Trump",
          #                      "Exterior Effect", 
          #                      "P3 004N", "P3 006N", "P4 002N",  "P3 009N", 
          #                      "Exterior slope", 
          #                      "Constant"),
          type = 'text')

lm(Porp_Absentee ~ Porp_Trump + P3_004N + P3_006N + P4_002N + P3_009N + ring, data = Precinct_match_data_3rd) %>% summary
lm(Porp_Absentee ~ Porp_Trump + P3_004N + P3_006N + P4_002N + P3_009N + ring, data = Precinct_match_data_3rd) %>% plot


# UP

# plot_PA_Precinct_Border_example <- ggplot() +
#   geom_sf(data = Precinct_Exterior, color = "black", fill = "#d59d9e") +
#   geom_sf(data = Precinct_Interior, color = "black", fill = "dodgerblue2") +
#   geom_sf(data = subset(us_county, GEOID == County_GEOID), color = "red", fill = NA) +
#   coord_sf()+
#   theme_void()+
#   scale_fill_viridis(discrete = TRUE)+
#   ggtitle("Allegheny County, Pennsylvania") +
#   labs(caption = "Figure i") +
#   theme(legend.position = "none", plot.title = element_text(hjust = 0.5, size=35),
#         plot.caption = element_text(hjust = 0.5, size=20))
```

```{r }
plot_PA_Diff_Porp_Absentee_Porp_Trump_Absentee <- ggplot(Precinct_match_data_3rd, 
                                                         aes(y = Porp_Trump_Absentee, x = Porp_Absentee, color = ring))+
  geom_point()+
  geom_smooth(method = 'lm', formula = y ~ x)+
  theme_light()+
  ggtitle("Figure 6: Difference in Trump Absentee Share Vs Absentee %; Allegheny Exterior & Recessed Paired Precincts")+
  labs(y = "Difference in % of Mail-In Ballots for Trump", 
       x = "Difference in % of Mail-In Ballots out of Total Ballots Cast",
       subtitle = "Across Adjacent Precincts, 2020 Presidential Election",
       caption = quote(NULL),
       color = "Precinct Difference")+
  scale_colour_manual(values=c("#c84c42", "#417ddd"))+
  scale_y_continuous(labels = scales::percent)+
  scale_x_continuous(labels = scales::percent)+
  theme(legend.position='top')
plot_PA_Diff_Porp_Absentee_Porp_Trump_Absentee

lm_PD2 <- lm(Porp_Trump_Absentee ~ Porp_Absentee * ring + P3_004N + P3_006N + P4_002N + P3_009N, 
          data = Precinct_match_data_3rd)
lm_PD2 %>% summary
lm_PD2 %>% plot
```

```{r }
# mach_O <- Conglomerate_Absentee_data %>% 
#   dplyr::select(c("GEOID20", "Porp_Absentee", "Porp_Trump", census_block_variables))
# mach_O <- Adjacent_Border %>% 
#   dplyr::select(GEOID_A) %>% 
#   dplyr::left_join(mach_O, by = c("GEOID_A" = "GEOID20")) %>% 
#   dplyr::select(!GEOID_A)
# 
# mach_I <- Conglomerate_Absentee_data %>% 
#   dplyr::select(c("GEOID20", "Porp_Absentee", "Porp_Trump", census_block_variables))
# mach_I <- Adjacent_Border %>% 
#   dplyr::select(GEOID_B) %>% 
#   dplyr::left_join(mach_I, by = c("GEOID_B" = "GEOID20"))
# mach_I
#   # dplyr::select(!GEOID_B)
# 
# # mach_I <- Conglomerate_Absentee_data %>% 
# #   dplyr::select(c("GEOID20", "Porp_Absentee", "Porp_Trump", census_block_variables)) %>% 
# #   dplyr::right_join(dplyr::select(Adjacent_Border, GEOID_B), by = c("GEOID20" = "GEOID_B"))
# #   # dplyr::select(!GEOID20)
# 
# mach_I - mach_O
# 
# sum(mach_I$GEOID_B != Adjacent_Border$GEOID_B)
# 
# length(unique(Conglomerate_Absentee_data$GEOID20))
# nrow(Conglomerate_Absentee_data)
```

```{r}
save(plot_PA_Precinct_Border_example, plot_PA_Porp_Trump_Porp_Absentee, lm_PU1_1, lm_PU1_2, plot_PA_Porp_Absentee_Porp_Trump_Absentee, lm_PU2_1, lm_PU2_2, plot_PA_Precinct_mach_lines, plot_PA_Diff_Porp_Trump_Porp_Absentee, lm_PD1_1, lm_PD1_2,plot_PA_Diff_Porp_Absentee_Porp_Trump_Absentee,lm_PD2, 
     file = "PaperDataPA.Rdata")
```



