"0","# Create a precinct matching data frame from exterior and interior precincts"
"0",""
"0","Precinct_Exterior_crs <- st_transform(Precinct_Exterior, crs = CRS) # Consistent CRS required for matching"
"0","Precinct_Interior_crs <- st_transform(Precinct_Interior, crs = CRS)"
"0",""
"0","Precinct_Border_Spatial <- rbind(Precinct_Exterior_crs, Precinct_Interior_crs) %>% "
"0","  sf::as_Spatial() # Combine interior and exterior precincts in spatial format for matching"
"0",""
"0","Adjacent_List_Border <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(Precinct_Border_Spatial@polygons), "
"0","                                         snap = poly2nb_snap) # Create adjacency list for exterior and interior precincts"
"0",""
"0","Precinct_Relational_Data <- data.frame(Precinct1_Index = numeric(), Precinct2_Index = numeric())"
"0","for(i in 1:length(Adjacent_List_Border)){ # Create two columns in a data frame from the adjacency list"
"0","  County_temp_data <- data.frame(Precinct1_Index = Adjacent_List_Border[[i]])"
"0","  County_temp_data$Precinct2_Index <- i"
"0","  Precinct_Relational_Data <- rbind(Precinct_Relational_Data, County_temp_data)"
"0","}"
"0",""
"0","Precinct_Border_crs <- rbind(Precinct_Exterior_crs, Precinct_Interior_crs) # Combine interior and exterior precincts"
"0",""
"0","Precinct_County_Key <- State_Precinct %>% # Create a key of which precincts belong to which County"
"0","  as.data.frame() %>% #                     (the same as Precinct_Border_crs but has different IDs)"
"0","  dplyr::select(COUNTYFP20, GEOID20) %>% "
"0","  dplyr::rename(GEOID = GEOID20)"
"0","Precinct_County_Key <- Precinct_Border_crs %>% "
"0","  dplyr::left_join(Precinct_County_Key, by = ""GEOID"") %>% "
"0","  as.data.frame() %>% "
"0","  dplyr::select(COUNTYFP20, GEOID)"
"0",""
"0","# Converting index numbers into GEOID and county IDs"
"0","Precinct_Relational_Data$Precinct1_CountyCode <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct1_Index),1]"
"0","Precinct_Relational_Data$Precinct2_CountyCode <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct2_Index),1]"
"0","Precinct_Relational_Data$Precinct1 <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct1_Index),2]"
"0","Precinct_Relational_Data$Precinct2 <- Precinct_County_Key[as.numeric(Precinct_Relational_Data$Precinct2_Index),2]"
"0",""
"0","Precinct_Match_Data <- Precinct_Relational_Data %>% # Create data frame of matching precincts"
"0","  subset(Precinct1_CountyCode != Precinct2_CountyCode) %>% # Filtering out inter-county tangents"
"0","  subset(Precinct1_CountyCode == county_code | Precinct2_CountyCode == county_code) %>% # Filtering border tangents that are not of County of interest"
"0","  base::subset(Precinct2_CountyCode == county_code) # Remove duplicate marches"
"0",""
"0","plot_PA_Precinct_Border_example <- ggplot() +"
"0","  geom_sf(data = Precinct_Exterior, color = ""black"", fill = ""#d59d9e"") +"
"0","  geom_sf(data = Precinct_Interior, color = ""black"", fill = ""dodgerblue2"") +"
"0","  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = ""red"", fill = NA) +"
"0","  coord_sf()+"
"0","  theme_void()+"
"0","  scale_fill_viridis(discrete = TRUE)+"
"0","  ggtitle(""Allegheny County, Pennsylvania"") +"
"0","  labs(caption = ""Figure i"") +"
"0","  theme(legend.position = ""none"", plot.title = element_text(hjust = 0.5, size=35),"
"0","        plot.caption = element_text(hjust = 0.5, size=20))"
"0",""
"0","plot_PA_Precinct_Border_example"
