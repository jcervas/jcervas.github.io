"0","# Aggregate block level census data to precinct level"
"0",""
"0","State_Precinct_County_Spatial <- State_Precinct_County %>% "
"0","  sf::as_Spatial()"
"0","Adjacent_Precinct_County <- spdep::poly2nb(sp::as.SpatialPolygons.PolygonsList(State_Precinct_County_Spatial@polygons), "
"0","                                         snap = poly2nb_snap)"
"0",""
"0",""
"0","Wall_conglomerate_Precinct <- State_Precinct %>% # Select precincts in all counties"
"0","  base::subset(COUNTYFP20 %in% unique(c(Precinct_Exterior_crs$COUNTYFP, Precinct_Interior_crs$COUNTYFP))) %>% "
"0","  st_transform(crs = CRS) %>% "
"0","  dplyr::rename(GEOID = GEOID20, COUNTYFP = COUNTYFP20)"
"0",""
"0","# Block aggregation"
"0","census_block_variables <- c(""P3_001N"", ""P3_004N"", ""P3_006N"", ""P4_002N"", ""P3_009N"") # Census block variables for aggregation"
"0",""
"0","# census_block_data <- tidycensus::get_decennial(geography = ""block"","
"0","#                     variables = census_block_variables,"
"0","#                     year = 2020,"
"0","#                     # summary_var = ""P001001"","
"0","#                     state = ""13"","
"0","#                     county = unique(Wall_conglomerate_Precinct$COUNTYFP),"
"0","#                     geometry = FALSE) %>%"
"0","#   pivot_wider(names_from = variable,"
"0","#               values_from = c(value))"
"0","# library(openxlsx)"
"0","# census_block_data %>%"
"0","#   openxlsx::write.xlsx(file = ""GA/census_block_data_GA.xlsx"", rowNames = FALSE, overwrite = TRUE)"
"0","census_block_data <- read_excel(""GA/census_block_data_GA.xlsx"") # Read census data"
"0",""
"0","sf::sf_use_s2(FALSE) # This is required to fix an error (does not appear to affect results)"
"2","Spherical geometry (s2) switched off
"
"0","PennsylvaniaBlocks <- sf::st_read(""GA/GA_Block"") %>% "
"0","  dplyr::rename(GEOID20_census = GEOID20) %>% "
"0","  right_join(dplyr::select(census_block_data, c(""GEOID"", census_block_variables)), by = c(""GEOID20_census"" = ""GEOID"")) # Combine Census data with block geography"
"1","Reading layer `"
"1","tl_2020_13_tabblock20"
"1","' from data source "
"1","`"
"1","C:\Users\seanj\Desktop\Project Directory\Voter Fraud 2023\GA\GA_Block"
"1","' "
"1","using driver `"
"1","ESRI Shapefile"
"1","'"
"1","
"
"1","Simple feature collection with 232717 features and 17 fields"
"1","
"
"1","Geometry type: MULTIPOLYGON
"
"1","Dimension:     XY
"
"1","Bounding box:  "
"1","xmin: -85.60516 ymin: 30.35576 xmax: -80.78296 ymax: 35.0013"
"1","
"
"1","Geodetic CRS:  NAD83
"
"0","County_blocks <- base::subset(PennsylvaniaBlocks, COUNTYFP20 %in% unique(Wall_conglomerate_Precinct$COUNTYFP)) %>% # Select blocks for all relevant counties"
"0","  st_transform(crs = CRS) %>% "
"0","  dplyr::mutate(area_original = st_area(geometry)) # Measure the original area of the blocks"
"0",""
"0","Block_overlap <- sf::st_intersection(Wall_conglomerate_Precinct, County_blocks) %>% # Area Calculation"
"0","  dplyr::mutate(area_modified = st_area(geometry), area_multiplier = as.numeric(area_modified / area_original)) %>% "
"0","  sf::st_drop_geometry() # Trims blocks into respective precincts and assigns precinct ID to block"
"2","although coordinates are longitude/latitude, st_intersection assumes that they are planar
"
"0","Block_overlap$area_multiplier[Block_overlap$area_multiplier > 1] <- 1 # Fixes apparent rounding error"
"0","Block_overlap[census_block_variables] <- Block_overlap[,census_block_variables] * Block_overlap[,""area_multiplier""] # Adjusts variables by proportion of precinct overlap"
"0",""
"0","Block_overlap_summarise <- Block_overlap %>% # Sum blocks to precinct level"
"0","  dplyr::group_by(GEOID) %>% "
"0","  dplyr::summarise_at(vars(census_block_variables), sum, na.rm=TRUE) %>% "
"0","  right_join(Wall_conglomerate_Precinct, by = c(""GEOID"" = ""GEOID"")) %>% "
"0","  as.data.frame() %>% "
"0","  dplyr::mutate(Minority = (P3_004N + P3_006N + P4_002N) / P3_001N, # Create minority variable and addreess undefined values"
"0","                Minority = ifelse(is.infinite(Minority), 0, Minority),"
"0","                Minority = ifelse(is.nan(Minority), 0, Minority))"
"0",""
"0","Block_overlap_summarise$Exterior_ <- ifelse(Block_overlap_summarise$COUNTYFP == county_code,"
"0","                                 ""Interior"", ""Exterior"")"
"0",""
"0","ggplot() + # Observe block aggregation"
"0","  geom_sf(data = Block_overlap_summarise, color = ""black"", aes(fill = Minority, geometry = geometry)) +"
"0","  geom_sf(data = subset(us_county, GEOID == County_GEOID), color = ""red"", fill = NA) +"
"0","  coord_sf()+"
"0","  scale_fill_viridis(discrete = FALSE)+"
"0","  ggtitle(""Allegheny"")"
