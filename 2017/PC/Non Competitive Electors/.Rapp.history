par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mfrow=c(1,5), oma= c(1,3,0,0), mar=c(3,1,1,1), mgp= c(2,1,0))#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                     par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,10:15], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,15:20], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,20:25], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5)
?par
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,1,1,1))#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                     par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,10:15], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,15:20], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,20:25], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5)
dev.off()#
 par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,3,1,1))#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                     par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,10:15], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,15:20], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,20:25], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                     par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,10:15], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,15:20], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,20:25], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,2,1,0), oma= c(0,3,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                     par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,10:15], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,15:20], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,20:25], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,2,1,0), oma= c(0,0,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                     par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,10:15], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,15:20], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
                      par(mar=c(3,2,1,0))#
           slopegraph(pctREP[,20:25], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,5,1,0), oma= c(0,0,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)#
           par(mar=c(3,5,1,0))#
           slopegraph(pctREP[,5:10], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,5,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,5,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.00,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,5,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06, offset.lab= .06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mar=c(3,5,1,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06, offset.lab= .06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,5,1,0), mai=c(1,5,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06, offset.lab= .06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,10,1,0), mai=c(1,5,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06, offset.lab= .06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
pctREP[!is.na(pctREP[,1]),1, drop = FALSE]
pctREP[!is.na(pctREP[,1]),1, drop = T]
#' @rdname slopegraph#
#' @aliases slopegraph-package#
#' @title Create Slopegraph from a data frame#
#' @description Convert an R data frame (containing a panel dataset, where rows are observations and columns are time periods) into an Edward Tufte-inspired Slopegraph.#
#' @param data An observation-by-period data.frame, with at least two columns. Missing values are allowed.#
#' @param main The main title of the plot. Default is \code{NULL} (none). See \code{\link[graphics]{par}}.#
#' @param xlab The x-axis label for the plot. Default is \code{''} (none). See \code{\link[graphics]{par}}.#
#' @param ylab The y-axis label for the plot. Default is \code{''} (none). See \code{\link[graphics]{par}}.#
#' @param xlabels The labels to use for the slopegraph periods. Default is \code{names(data)}.#
#' @param xlim The x-axis limits of the plot. Automatically calculated by default.#
#' @param ylim The y-axis limits of the plot. Automatically calculated by default.#
#' @param bty The box type for the plot. Default is \code{'n'} (none). See \code{\link[graphics]{par}}.#
#' @param xaxt The x-axis type for the plot. Default is \code{'n'} (none). See \code{\link[graphics]{par}}.#
#' @param yaxt The y-axis type for the plot. Default is \code{'n'} (none). See \code{\link[graphics]{par}}.#
#' @param panel.first An expression to add something between drawing the blank canvas and adding the plot content (i.e., behind the slopegraph). Default is \code{NULL}.#
#' @param panel.last An expression to add something after adding the plot content. Default is \code{NULL}.#
#' @param labpos.left The \code{pos} (positioning) parameter for the leftside observation labels. Default is \code{2}. See \code{\link[graphics]{par}}. If \code{NULL}, labels are not drawn.#
#' @param labpos.right The \code{pos} (positioning) parameter for the rightside observation labels. Default is \code{2}. See \code{\link[graphics]{par}}. If \code{NULL}, labels are not drawn.#
#' @param decimals The number of decimals to display for values in the plot. Default is \code{0} (none).#
#' @param col.lines A vector of colors for the slopegraph lines. Default is \code{par('fg')}.#
#' @param col.lab A vector of colors for the observation labels. Default is \code{par('fg')}.#
#' @param col.num A vector of colors for the number values. Default is \code{par('fg')}. If \code{NULL}, labels are not drawn.#
#' @param col.xaxt A character string containing the x-axis color. Default is \code{par('fg')}.#
#' @param offset.x A small offset for \code{segments}, to be used when positioning the numeric values. Default is \code{NULL} (set automatically based on the data.#
#' @param offset.lab A small offset for the observation labels. Default is \code{.1}.#
#' @param cex.lab A numeric value indicating the size of row labels. Default is \code{1}. See \code{\link[graphics]{par}}.#
#' @param cex.num A numeric value indicating the size of numeric labels. Default is \code{1}. See \code{\link[graphics]{par}}.#
#' @param family The font family to use in the plots. Set to \dQuote{serif} by default.#
#' @param font.lab Default is \code{1}. See \code{? text}.#
#' @param font.num Default is \code{1}. See \code{? text}.#
#' @param lty A vector of line type values for the slopegraph lines. Default is \code{par("lty")}. See \code{\link[graphics]{par}}.#
#' @param lwd A vector of line width values for the slopegraph lines. Default is \code{par("lwd")}. See \code{\link[graphics]{par}}.#
#' @param mai A margin specification. Default is \code{NULL}. See \code{\link[graphics]{par}}.#
#' @param na.span A logical indicating whether line segments should span periods with missing values. The default is \code{FALSE}, such that some segments are not drawn.#
#' @param \ldots Additional arguments to \code{plot}.#
#' @return A five-variable data frame, where each row contains: the row number from \code{data}, \samp{x1}, \samp{x2}, \samp{y1}, and \samp{y2} coordinates for each drawn segment, invisibly.#
#' @examples#
#' ## Tufte's Cancer Graph (to the correct scale)#
#' data(cancer)#
#' slopegraph(cancer, col.lines = 'gray', xlim = c(-.5,5.5),#
#'            xlabels = c('5 Year','10 Year','15 Year','20 Year'))#
#' #
#' ## Tufte's GDP Graph#
#' data(gdp)#
#' slopegraph(gdp, col.line='gray', xlabels = c('1970','1979'), #
#'     main = 'Current Receipts of Goverment as a Percentage of Gross Domestic Product')#
#' #
#' ## Ranking of U.S. State populations#
#' data(states)#
#' slopegraph(states, col.line='black', ylim = c(38,0),#
#'            main = 'Relative Rank of U.S. State Populations, 1790-1870')#
#' #
#' @references#
#' \url{http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0003nk}#
#' #
#' Tufte, Edward. \emph{The Visual Display of Quantitative Information}. Graphics Press.#
#' #
#' Tufte, Edward. \emph{Beautiful Evidence}. Graphics Press.#
#' #
#' @seealso \code{\link{cancer}}, \code{\link{gdp}}, \code{\link{states}}#
#' For a ggplot2 version, use \code{\link{ggslopegraph}}.#
#' @author Thomas J. Leeper#
#' @import graphics#
#' @importFrom stats reshape#
#' @importFrom utils head#
#' @export#
slopegraph <- function(#
    data,#
    main = NULL,#
    xlab = '',#
    ylab = '',#
    xlabels = names(data),#
    xlim = c(.5,ncol(data)+.5),#
    ylim = c(min(data,na.rm=TRUE)-diff(range(data,na.rm=TRUE))/100,max(data,na.rm=TRUE)+diff(range(data,na.rm=TRUE))/100),#
    bty = 'n',#
    xaxt = 'n',#
    yaxt = 'n',#
    panel.first = NULL,#
    panel.last = NULL,#
    labpos.left = 2,#
    labpos.right = 4,#
    decimals = 0L,#
    col.lines = par('fg'),#
    col.lab = col.lines,#
    col.num = col.lines,#
    col.xaxt = par('fg'),#
    offset.x = NULL,#
    offset.lab = .1,#
    cex.lab = 1,#
    cex.num = 1,#
    x.cex.axis = 1,#
    family = "serif",#
    font.lab = 1,#
    font.num = 1,#
    lty = par("lty"),#
    lwd = par("lwd"),#
    mai = NULL,#
    na.span = FALSE,#
    ...)#
{#
    # check decimal formatting#
    fmt <- paste0("%0.", decimals, "f")#
    # check data#
    if (ncol(data) < 2) {#
        stop('`data` must have at least two columns')#
    }#
    data[] <- lapply(data, round, decimals)#
    # segmentize#
    to_draw <- segmentize(as.matrix(data))#
    # reshape for printing numeric value labels#
    long <- reshape(data, direction = "long", varying = names(data), v.names = "value", sep = "")#
    # draw margins#
    if (is.null(mai)) {#
        op <- par(mai=c(1, 0, if(is.null(main)) 0 else 1, 0))#
        on.exit(par(op))#
    } else {#
        op <- par(mai=mai)#
        on.exit(par(op))#
    }#
    plot(NA, xlim=xlim, ylim=ylim, main=main, family=family,#
         bty=bty, yaxt=yaxt, xaxt=xaxt, xlab=xlab, ylab=ylab, ...)#
    # optional expression#
    if (!is.null(panel.first)) {#
        eval(panel.first)#
    }#
    # expand formatting arguments#
    if (length(col.lab) == 1L) {#
        col.lab <- rep(col.lab, length.out = nrow(data))#
    }#
    if (length(col.num) == 1L) {#
        col.num <- rep(col.num, length.out = nrow(data))#
    }#
    if (length(col.lines) == 1L) {#
        col.lines <- rep(col.lines, length.out = nrow(data))#
    }#
    if (length(lwd) == 1) {#
        lwd <- rep(lwd, nrow(data))#
    }#
    if (length(lty) == 1) {#
        lty <- rep(lty, nrow(data))#
    }#
    col.num <- col.num[long[["id"]]]#
    # x-axis#
    axis(1, 1:ncol(data), labels = xlabels, col = col.xaxt, col.ticks = col.xaxt, family = family, cex.axis= x.cex.axis)#
    # left-side labels#
    if (!is.null(labpos.left)) {#
        leftlabs <- data[!is.na(data[,1]),1, drop = FALSE]#
        text(1-offset.lab, bump_overlaps(leftlabs[,1], decimals = decimals),#
             col=col.lab[which(!is.na(data[,1]))], rownames(leftlabs), pos=labpos.left, #
             cex=cex.lab, font=font.lab, family=family, xpd=TRUE)#
    }#
    # right-side labels#
    if (!is.null(labpos.right)) {#
        rightlabs <- data[!is.na(data[,ncol(data)]), ncol(data), drop = FALSE]#
        text(ncol(data)+offset.lab, bump_overlaps(rightlabs[,1], decimals = decimals), #
             col=col.lab[which(!is.na(data[,ncol(data)]))], rownames(rightlabs), pos=labpos.right, #
             cex=cex.lab, font=font.lab, family=family)#
    }#
    if (is.null(offset.x)) {#
        offset.x <- (max(strwidth(sprintf(fmt, long[["value"]]))) + 0.02)/2L#
    }#
    to_draw2 <- to_draw[!duplicated(to_draw),]#
    apply(to_draw2, 1, function(rowdata){#
            i <- rowdata[1]#
            x1 <- rowdata[2]#
            x2 <- rowdata[3]#
            y1 <- rowdata[4]#
            y2 <- rowdata[5]#
            # draw lines#
            ysloped <- (y2-y1)*offset.x#
            segments(x1+offset.x, if(y1==y2) y1 else (y1+ysloped),#
                     x2-offset.x, if(y1==y2) y2 else (y2-ysloped),#
                     col = col.lines[i],#
                     lty = lty[i],#
                     lwd = lwd[i])#
    })#
    # numeric value labels #
    if (!is.null(col.num)) {#
        text(long[["time"]], bump_overlaps(long[["value"]]), sprintf(fmt, long[["value"]]), #
             col = col.num, cex = cex.num, font = font.num, family = family)#
    }#
    # optional expression#
    if (!is.null(panel.last)) {#
        eval(panel.last)#
    }#
    # return `to_draw` invisibly#
    invisible(to_draw)#
}
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,10,1,0), mai=c(1,5,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06, offset.lab= .06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
source("/Users/jcervas/Google Drive/School/UCI/R Functions/Leeper/slopegraph.R")#
source("/Users/jcervas/Google Drive/School/UCI/R Functions/Leeper/segmentize.R")#
source("/Users/jcervas/Google Drive/School/UCI/R Functions/Leeper/bump_overlaps.R")
par(mfrow=c(1,5), oma= c(2,3,0,0), mar=c(3,5,1,1))#
           par(mar=c(3,10,1,0), mai=c(1,5,0,0))#
           slopegraph(pctREP[,1:5], ylim = c(51,0), offset.x = 0.06, offset.lab= .06,#
           #col.lines = cols, col.lab = cols, #
           #main = 'Relative Rank of U.S. by Two-Party Vote, 1868-2016', #
           cex.num=0.5, cex.lab=0.5, x.cex.axis= 0.5, labpos.right=NULL)
library(pdftools)#
library(tm)#
options(tx="default/America/Los_Angeles")
txt <- read.table("/Users/jcervas/Desktop/test.txt")
txt
scdoc1 <- VCorpus(VectorSource(txt))
options(tx="default/America/Los_Angeles")
scdoc1 <- VCorpus(VectorSource(txt))
scdoc1 <- tm_map(scdoc1, content_transformer(tolower))
scdoc1 <- tm_map(scdoc1, stripWhitespace)
scdoc1 <- tm_map(scdoc1, removeWords, stopwords("english"))
scdoc1
dtm <- DocumentTermMatrix(scdoc1)
findFreqTerms(dtm, 5)
url <- "https://www.rottentomatoes.com/m/war_for_the_planet_of_the_apes"
raw.result <- GET(url, user_agent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36"))
#install.packages(c("httr", "jsonlite", "lubridate"))#
library(httr)#
library(jsonlite)#
library(lubridate)#
options(stringsAsFactors=F, tz='default/America/Los_Angeles')
raw.result <- GET(url, user_agent("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36"))
this.content <- fromJSON(rawToChar(raw.result$content))
raw.result
session <- html_session(url)
url <- "https://www.rottentomatoes.com/m/war_for_the_planet_of_the_apes"
session <- html_session(url)
library(rvest)
movies <- list()#
#
submit_form2 <- function(session, form){#
  library(XML)#
  url <- XML::getRelativeURL(form$url, session$url)#
  url <- paste(url,'?',sep='')#
  values <- as.vector(rvest:::submit_request(form)$values)#
  att <- names(values)#
  if (tail(att, n=1) == "NULL"){#
    values <- values[1:length(values)-1]#
    att <- att[1:length(att)-1]#
  }#
  q <- paste(att,values,sep='=')#
  q <- paste(q, collapse = '&')#
  q <- gsub(" ", "+", q)#
  url <- paste(url, q, sep = '')#
  html_session(url)#
}
session <- html_session(url)
form <- html_form(session)[[1]]
form
page <- read_html(url)
rt.nodes <-html_nodes(rt, "#tomato_meter_link .superPageFontColor span")
rt.nodes <-html_nodes(rt, ".top_box_office .sidebarInTheaterOpening:nth-child(4) .left_col , #tomato_meter_link .superPageFontColor span")
rt <- read_html(url)
rt.nodes <-html_nodes(rt, ".top_box_office .sidebarInTheaterOpening:nth-child(4) .left_col , #tomato_meter_link .superPageFontColor span")
html_text(rt.nodes)
rt.nodes <-html_nodes(rt, ".top_box_office .sidebarInTheaterOpening:nth-child(4)")
html_text(rt.nodes)
rt.nodes <-html_nodes(rt, ".sidebarInTheaterOpening:nth-child(4)")
html_text(rt.nodes)
rt.nodes <-html_nodes(rt, "#tomato_meter_link .superPageFontColor span")
html_text(rt.nodes)
rt.nodes <-html_nodes(rt, "#tomato_meter_link span")
html_text(rt.nodes)
rt.nodes <-html_nodes(rt, ".superPageFontColor span")
html_text(rt.nodes)
rt <- read_html(url)#
rt.nodes <-html_nodes(rt, "#tomato_meter_link .superPageFontColor span") #
rt.movie.rating <- html_text(rt.nodes)
rt.movie.rating
html_text(rt.nodes)[1]
rt.movie.rating <- html_text(rt.nodes)[1]
form
form <- set_values(form, search = "Spiderman: Homecoming")
webpage <- submit_form2(session, form)
webpage
rt.nodes <-html_nodes(webpage, ".tMeterScore")
rt.nodes
form <- set_values(form, search = "Spiderman: Homecoming")
form
webpage <- submit_form2(session, form)
submit_form2(session, form)
form <- set_values(form, search = "Spider-man: Homecoming")
submit_form2(session, form)
rt.nodes <-html_nodes(webpage, ".tMeterScore")
rt.nodes
html_text(rt.nodes)
form <- set_values(form, search = "Spider-man: Homecoming")
webpage <- submit_form2(session, form)
rt.nodes <-html_nodes(webpage, ".tMeterScore")
rt.movie.rating <- html_text(rt.nodes)[1]
rt.movie.rating
submit_form2(session, form)
url <- "https://www.rottentomatoes.com/"
url <- "https://www.rottentomatoes.com"
session <- html_session(url)
form <- html_form(session)[[1]]
form
form <- set_values(form, search = "Spider-man: Homecoming")
webpage <- submit_form2(session, form)
webpage
rt.nodes <-html_nodes(webpage, ".tMeterScore")
html_text(rt.nodes)
?rvest
??rvest
??follow_link
follow_link(webpage, .clearfix:nth-child(1) .bold .articleLink)
follow_link(session, .clearfix:nth-child(1) .bold .articleLink)
website %>% follow_link(.clearfix:nth-child(1) .bold .articleLink)
website %>% follow_link(xpath=.clearfix:nth-child(1) .bold .articleLink)
follow_link(xpath=.clearfix:nth-child(1) .bold .articleLink)
follow_link(css=.clearfix:nth-child(1) .bold .articleLink)
form %>% follow_link(css=.clearfix:nth-child(1) .bold .articleLink)
install.packages("factorplot")
library(factorplot)
factorplot
ANES <- read.csv("/Users/jcervas/Downloads/anes_pilot_2016.csv")
head(ANES)
sum(ANES$THERMPO_THPODPC)
summary(ANES$THERMPO_THPODPC)
names(ANES)
ANES <- read.dta("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_cdf_stata12.dta")
summary(ANES$THERMPO_THPODPC)
summary(ANES$V161086)
ANES <- read.dta("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_cdf_stata12.dta")
summary(ANES$V161086)
ANES <- read.dta("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")
library(foreign)
ANES <- read.dta("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_cdf_stata12.dta")
summary(ANES$V161086)
ANES <- read.dta("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")
summary(ANES$V161086)
library(readstata13)
ANES <- read.dta("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")
ANES <- read.dta13("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")
summary(ANES$V161086)
warnings()
summary(ANES$V161086)
cut(ANES$V161086, c(0,10,20,30,40,50,60,70,80,90,100))
cut(ANES$V161086, seq(0,100,10))
cut(ANES$V161086, seq(0,100,10), labels=c(1:10))
republican <- cut(ANES$V161087, seq(0,100,10), labels=c(1:10))
democrat <- cut(ANES$V161086, seq(0,100,10), labels=c(1:10))
plot(democrat,republican)
plot(democrat,republican, type="s")
?plot
plot(democrat,republican, type="p")
summary(democrat)
mean(democrat[democrat==1])
mean(democrat[democrat==1], na.rm=TRUE)
democrat <- as.numeric(cut(ANES$V161086, seq(0,100,10), labels=c(1:10)))
democrat
republican <- as.numeric(cut(ANES$V161087, seq(0,100,10), labels=c(1:10)))
plot(democrat,republican)
mean(democrat[democrat==1], na.rm=T)
mean(democrat[republican==1], na.rm=T)
mean(democrat[republican==1:10], na.rm=T)
mean(democrat[republican==2], na.rm=T)#
mean(democrat[republican==3], na.rm=T)#
mean(democrat[republican==4], na.rm=T)#
mean(democrat[republican==5], na.rm=T)#
mean(democrat[republican==6], na.rm=T)#
mean(democrat[republican==7], na.rm=T)#
mean(democrat[republican==8], na.rm=T)#
mean(democrat[republican==9], na.rm=T)#
mean(democrat[republican==10], na.rm=T)
length(democrat[republican==1], na.rm=T)
length(democrat[republican==1])
length(democrat[republican==1])#
length(democrat[republican==2])#
length(democrat[republican==3])#
length(democrat[republican==4])#
length(democrat[republican==5])#
length(democrat[republican==6])#
length(democrat[republican==7])#
length(democrat[republican==8])#
length(democrat[republican==9])#
length(democrat[republican==10])
length(democrat[republican==1 & democrat==1])
length(democrat[republican==1 & democrat==1])#
length(democrat[republican==2 & democrat==1])#
length(democrat[republican==3 & democrat==1])#
length(democrat[republican==4 & democrat==1])#
length(democrat[republican==5 & democrat==1])#
length(democrat[republican==6 & democrat==1])#
length(democrat[republican==7 & democrat==1])#
length(democrat[republican==8 & democrat==1])#
length(democrat[republican==9 & democrat==1])#
length(democrat[republican==10 & democrat==1])
for (i in 1:10) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i])#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republicani==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
}
TvC <- matrix(nrows=10, ncols=10)
TvC <- matrix(nrow=10, ncol=10)
for (i in 1:10) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i])#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republicani==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
}
for (i in 1:10) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i])#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republican==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
}
TvC
dim(ANES)
colSums(TvC)
length(democrat)
dim(ANES)
cbind(democrat,republican)
i
length(democrat[republican==1 & democrat==i])
democrat[republican==1 & democrat==1]
democrat[democrat==NA] <- 11
democrat
democrat[is.na(democrat)] <- 11
democrat
library(foreign)#
library(readstata13)#
#
ANES <- read.dta13("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")#
#
summary(ANES$V161086)#
democrat <- as.numeric(cut(ANES$V161086, seq(0,100,10), labels=c(1:10)))#
republican <- as.numeric(cut(ANES$V161087, seq(0,100,10), labels=c(1:10)))#
democrat[is.na(democrat)] <- 0#
republican[is.na(republican)] <- 0#
TvC <- matrix(nrow=11, ncol=11)#
for (i in 1:11) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i], na.rm=T)#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republican==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
}
library(foreign)#
library(readstata13)#
#
ANES <- read.dta13("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")#
#
summary(ANES$V161086)#
democrat <- as.numeric(cut(ANES$V161086, seq(0,100,10), labels=c(1:10)))#
republican <- as.numeric(cut(ANES$V161087, seq(0,100,10), labels=c(1:10)))#
democrat[is.na(democrat)] <- 0#
republican[is.na(republican)] <- 0#
TvC <- matrix(nrow=11, ncol=11)#
for (i in 1:11) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i])#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republican==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
}
TvC
library(foreign)#
library(readstata13)#
#
ANES <- read.dta13("/Users/jcervas/Google Drive/Data/ANES/anes_timeseries_cdf_dta/anes_timeseries_2016.dta")#
#
summary(ANES$V161086)#
democrat <- as.numeric(cut(ANES$V161086, seq(0,100,10), labels=c(1:10)))#
republican <- as.numeric(cut(ANES$V161087, seq(0,100,10), labels=c(1:10)))#
democrat[is.na(democrat)] <- 11#
republican[is.na(republican)] <- 11#
TvC <- matrix(nrow=11, ncol=11)#
for (i in 1:11) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i])#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republican==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
}
TvC
TvC <- matrix(nrow=11, ncol=11)#
for (i in 1:11) {#
TvC[1,i] <- length(democrat[republican==1 & democrat==i])#
TvC[2,i] <- length(democrat[republican==2 & democrat==i])#
TvC[3,i] <- length(democrat[republican==3 & democrat==i])#
TvC[4,i] <- length(democrat[republican==4 & democrat==i])#
TvC[5,i] <- length(democrat[republican==5 & democrat==i])#
TvC[6,i] <- length(democrat[republican==6 & democrat==i])#
TvC[7,i] <- length(democrat[republican==7 & democrat==i])#
TvC[8,i] <- length(democrat[republican==8 & democrat==i])#
TvC[9,i] <- length(democrat[republican==9 & democrat==i])#
TvC[10,i] <- length(democrat[republican==10 & democrat==i])#
TvC[11,i] <- length(democrat[republican==11 & democrat==i])#
#
}
TvC
sum(TvC)
TvC/sum(TvC)
TvC/sum(TvC)*100
round(TvC/sum(TvC)*100, digits=3)
heatmap(TvC)
heatmap(TvC, Rowv=F)
heatmap(TvC, Rowv=NA, Colv=NA, scale="column")
3#
4#
5#
6#
7#
8#
9#
10#
11#
12#
13#
library("lattice")
x <- seq(1,10, length.out=20)#
y <- seq(1,10, length.out=20)#
data <- expand.grid(X=x, Y=y)#
data$Z <- runif(400, 0, 5)
data
levelplot(Z ~ X*Y, data=data  , xlab="X" , col.regions = heat.colors(100)[length(heat.colors(100)):1]   , main="")
levelplot(TvC  , xlab="X" , col.regions = heat.colors(100)[length(heat.colors(100)):1]   , main="")
?levelplot
TvC
levelplot(TvC  , xlab="X" , col.regions = heat.colors(100)[length(heat.colors(100)):1]   , main="", xlab="Clinton", ylab="Trump")
levelplot(TvC , col.regions = heat.colors(100)[length(heat.colors(100)):1]   , main="", xlab="Clinton", ylab="Trump")
levelplot(TvC , col.regions = heat.colors(100)[length(heat.colors(100)):1]   , main="", ylab="Clinton", xlab="Trump")
sum(TvC)
###########################################################################################################
###########################################################################################################
###########################################################################################################
###########################################################################################################
### Code to Replicate "Why noncompetitive states are so important for understanding the outcomes of competitive elections: the Electoral College 1868-2016"#
### Accepted - Public Choice#
### Jonathan R. Cervas, University of California Irvine#
### Bernard N. Grofman, University of California Irvine#
### Notes: #
### 1960 and 1976 have too many coalitons to calculate when we go to +-5%, so they are excluded.  #
### All calulations are done by taking the two-party vote, ie, DEM/(DEM+REP) or (REP/DEM+REP).#
### Running funtction to get Winningness and other B+K calculations takes a long time, so they are commented out and just imports data from CSV for further calculations.#
###########################################################################################################
###########################################################################################################
### Remove all objects just to be safe.#
			rm(list=ls(all=TRUE))#
#
setwd("/Users/jcervas/Dropbox/Non Competitive Electors")#
options(scipen=999) # Turn off Scientific Notation#
###########################################################################################################
########### - Libraries - ############
###########################################################################################################
library(stargazer)#
#
###########################################################################################################
######### - Functions - #############
###########################################################################################################
source("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/winningness.R")#
#
###########################################################################################################
######### - Read in Data from internet - #############
###########################################################################################################
		cat(paste("\n", "********** Read in Brams-Kilgour Replication Data [+/-3%]", "**********", "\n")) #
	bramskilgour.plusminus3 <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/bramskilgourplusminus3.csv")#
		cat(paste("\n", "********** Read in Brams-Kilgour Replication Data [+/-5%]", "**********", "\n")) #
	bramskilgour.plusminus5 <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/bramskilgourplusminus5.csv")#
		cat(paste("\n", "********** Read in Presidential Election Data", "**********", "\n")) #
	d <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/Presidential_Election_General_Two_Party.csv")#
###########################################################################################################
########## - Election Data Set-up - #############
###########################################################################################################
	 d$tptotal <- d$dem+d$rep#
	 d$pctREP <- d$rep/d$tptotal#
	 d$pctDEM <- d$dem/d$tptotal#
d <- d[d$year>1867,] #
uniqueyr <- unique(d$year)#
#
###########################################################################################################
########## - Non-Competitive Summary - ################
##########################################################################################################	 #
ptm <- proc.time()#
bramskilgour <- numeric(0)#
competitive.low <- 0.47#
competitive.high <- 0.53#
#
summary.plusminus3 <- #
	data.frame(Year=uniqueyr, #
	Total.States=NA, #
	Total.ECvotes=NA, #
	Safe.Republican.States=NA, #
	Safe.Democratic.States=NA, #
	Competitive.States=NA, #
	Safe.Republican.ECvotes=NA, #
	Safe.Democratic.ECvotes=NA, #
	Competitive.ECvotes=NA, #
	Rep.Competitive.Wins=NA, #
	Dem.Competitive.Wins=NA, #
	Rep.Total.ECwins =NA, #
	Dem.Total.ECwins =NA)	 #
#
correlate3independence <- #
	data.frame(Year=uniqueyr, #
	Rep.st.NonCompetitive=NA, #
	Rep.st.Competitive=NA, #
	Rep.EC.NonCompetitive=NA, #
	Rep.EC.Competitive=NA)#
for (yr in uniqueyr){#
	e <- d[d$year==yr,]#
		noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP),]#
		compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP),]#
#
noncompetitive <- #
	data.frame(#
	state=NA, #
	pctREP=NA, #
	ecvotes=NA)#
competitive <- #
	data.frame(state=NA, #
	pctREP=NA, #
	ecvotes=NA)	#
noncompetitive[1:length(noncompet$state),1] <- noncompet$state#
noncompetitive[1:length(noncompet$state),2] <- noncompet$pctREP#
noncompetitive[1:length(noncompet$state),3] <- noncompet$ecvotes#
noncompetitive$s <- 1#
#
competitive[1:length(compet$state),1] <- compet$state#
competitive[1:length(compet$state),2] <- compet$pctREP#
competitive[1:length(compet$state),3] <- compet$ecvotes#
competitive$s <- 1	#
summary.plusminus3[summary.plusminus3$Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
summary.plusminus3[summary.plusminus3$Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
summary.plusminus3[summary.plusminus3$Year==yr,"Competitive.States"] <- sum(competitive$s)#
summary.plusminus3[summary.plusminus3$Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
summary.plusminus3[summary.plusminus3$Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP<.5])#
#
####### - Run this to generate +-3% numbers	#
# # # winning <- numeric(0) # Place holder for quicker run times#
# # # winning <- winningness(e, "ecvotes", "pctDEM", "pctREP",competitive.high, competitive.low) #
# # # bramskilgour <- rbind(bramskilgour,winning)#
#
####### - Correlating Republican share of victories and Republican share of EC seat in Competitive and Non-Competitive States#
correlate3independence[correlate3independence$Year==yr,"Rep.st.NonCompetitive"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])/sum(noncompetitive$s)#
correlate3independence[correlate3independence$Year==yr,"Rep.st.Competitive"] <- sum(competitive$s[competitive$pctREP>.5])/sum(noncompetitive$s)#
correlate3independence[correlate3independence$Year==yr,"Rep.EC.NonCompetitive"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])/sum(noncompetitive$ecvotes)#
correlate3independence[correlate3independence$Year==yr,"Rep.EC.Competitive"] <- sum(competitive$ecvotes[competitive$pctREP>.5])/sum(competitive$ecvotes)#
}#
# # # write.csv(bramskilgour, "bramskilgourplusminus3.csv", row.names=FALSE)#
proc.time() - ptm#
#
###########################################################################################################
cat(paste("########################################################################################################## \n","***** Correlation tests", "\n"))#
cat(paste("***** Correlation tests", "\n")) ###############################
	 cor.test(correlate3independence[,"Rep.st.NonCompetitive"],correlate3independence[,"Rep.st.Competitive"])#
	 cor.test(correlate3independence[,"Rep.EC.NonCompetitive"],correlate3independence[,"Rep.EC.Competitive"]) #
###########################################################################################################
########## - Sensitivity Analysis +-5% - ##################################################################
##########################################################################################################	 #
	 competitive.low <- 0.45#
	 competitive.high <- 0.55#
	 summary.plusminus5 <- #
	 	data.frame(Year=uniqueyr, #
	 	Total.States=NA, #
	 	Total.ECvotes=NA, #
	 	Safe.Republican.States=NA, #
	 	Safe.Democratic.States=NA, #
	 	Competitive.States=NA, #
	 	Safe.Republican.ECvotes=NA, #
	 	Safe.Democratic.ECvotes=NA, #
	 	Competitive.ECvotes=NA, #
	 	Rep.Competitive.Wins=NA, #
	 	Dem.Competitive.Wins=NA, #
	 	Rep.Total.ECwins =NA, #
	 	Dem.Total.ECwins =NA)#
	summary.plusminus5 <- #
		data.frame(Year=uniqueyr, #
		Total.States=NA, #
		Total.ECvotes=NA, #
		Safe.Republican.States=NA, #
		Safe.Democratic.States=NA, #
		Competitive.States=NA, #
		Safe.Republican.ECvotes=NA, #
		Safe.Democratic.ECvotes=NA, #
		Competitive.ECvotes=NA, #
		Rep.Competitive.Wins=NA, #
		Dem.Competitive.Wins=NA, #
		Rep.Total.ECwins =NA, #
		Dem.Total.ECwins =NA)	#
 uniqueyr <- seq(1868,2016, 4)#
for (yr in uniqueyr) {#
	e <- d[d$year == yr, ]#
#
	noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP), ]#
	compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), ]#
#
	noncompetitive2 <- data.frame(state = noncompet$state, pctREP = NA, ecvotes = NA, s = 1)#
	competitive2 <- data.frame(state = compet$state, pctREP = NA, ecvotes = NA, s = 1)#
#
	noncompetitive2[1:length(noncompet$state), 1] <- noncompet$state#
	noncompetitive2[1:length(noncompet$state), 2] <- noncompet$pctREP#
	noncompetitive2[1:length(noncompet$state), 3] <- noncompet$ecvotes#
#
	competitive2[1:length(compet$state), 1] <- compet$state#
	competitive2[1:length(compet$state), 2] <- compet$pctREP#
	competitive2[1:length(compet$state), 3] <- compet$ecvotes#
#
	summary.plusminus5[summary.plusminus5$Year == yr, "Total.States"] <- sum(competitive2$s) + sum(noncompetitive2$s)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Total.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes) + sum(noncompetitive2$s * #
		noncompetitive2$ecvotes)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Competitive.States"] <- sum(competitive2$s)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Competitive.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Dem.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Rep.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP > 0.5])#
#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Republican.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Democratic.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Republican.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Democratic.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP < 0.5])#
	####### - Run this to generate +-5% numbers	#
	# # # winning10 <- numeric(0) # Place holder for quicker run times#
# # # winning10 <- winningness(e, "ecvotes", "pctDEM", "pctREP", competitive.high, competitive.low) #
# # # bramskilgour.plusminus5 <- rbind(bramskilgour.plusminus5,winning10)#
} #
# # # write.csv(bramskilgour.plusminus5, "bramskilgour.plusminus5.csv")#
#
###########################################################################################################
########## - Sensitivity Analysis +/- 1.5% - #####################################################################
##########################################################################################################	 #
	 competitive.low <- 0.485#
	 competitive.high <- 0.515#
	 bramskilgour.plusminus1.5 <- numeric(0)#
	 summary.plusminus1.5 <- #
	 	data.frame(Year = uniqueyr, #
	 	Total.States = NA, #
	 	Total.ECvotes = NA, #
	 	Safe.Republican.States = NA, #
	 	Safe.Democratic.States = NA, #
	 	Competitive.States = NA, #
	 	Safe.Republican.ECvotes = NA, #
	 	Safe.Democratic.ECvotes = NA, #
	 	Competitive.ECvotes = NA, #
	 	Rep.Competitive.Wins = NA, #
	 	Dem.Competitive.Wins = NA, #
	 	Rep.Total.ECwins = NA, #
	 	Dem.Total.ECwins = NA)#
	 summary.plusminus1.5 <- #
	 	data.frame(Year = uniqueyr, #
	 	Total.States = NA, #
	 	Total.ECvotes = NA, #
	 	Safe.Republican.States = NA, #
	 	Safe.Democratic.States = NA, #
	 	Competitive.States = NA, #
	 	Safe.Republican.ECvotes = NA, #
	 	Safe.Democratic.ECvotes = NA, #
	 	Competitive.ECvotes = NA, #
	 	Rep.Competitive.Wins = NA, #
	 	Dem.Competitive.Wins = NA, #
	 	Rep.Total.ECwins = NA, #
	 	Dem.Total.ECwins = NA)	#
 uniqueyr <- seq(1868, 2016, 4)#
 for (yr in uniqueyr) {#
 	e <- d[d$year == yr, ]#
 	is.competitive <- ifelse(e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), is.competitive <- 1, is.competitive <- 0)#
#
 	if (sum(is.competitive) < 1) {#
 		summary.plusminus1.5[summary.plusminus1.5$Year == yr, ] <- 0#
 	}#
 	if (sum(is.competitive) < 1) {#
 		next#
 	}#
 	noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP), ]#
 	compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), ]#
#
 	noncompetitive2 <- #
 		data.frame(state = noncompet$state, #
 		pctREP = NA, #
 		ecvotes = NA, #
 		s = 1)#
 	competitive2 <- #
 		data.frame(state = compet$state, #
 		pctREP = NA, #
 		ecvotes = NA, #
 		s = 1)#
#
 	noncompetitive2[1:length(noncompet$state), 1] <- noncompet$state#
 	noncompetitive2[1:length(noncompet$state), 2] <- noncompet$pctREP#
 	noncompetitive2[1:length(noncompet$state), 3] <- noncompet$ecvotes#
#
 	competitive2[1:length(compet$state), 1] <- compet$state#
 	competitive2[1:length(compet$state), 2] <- compet$pctREP#
 	competitive2[1:length(compet$state), 3] <- compet$ecvotes#
#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Total.States"] <- sum(competitive2$s) + sum(noncompetitive2$s)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Total.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes) + sum(noncompetitive2$s * #
 		noncompetitive2$ecvotes)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Competitive.States"] <- sum(competitive2$s)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Competitive.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Dem.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Rep.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP > 0.5])#
#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Republican.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Democratic.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Republican.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Democratic.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP < 0.5])#
#
 	####### - Run this to generate +-5% numbers	#
 	winning1.5 <- numeric(0) # Place holder for quicker run times#
 	winning1.5 <- winningness(e, "ecvotes", "pctDEM", "pctREP", competitive.high, competitive.low)#
 	bramskilgour.plusminus1.5 <- rbind(bramskilgour.plusminus1.5, winning1.5)#
 }#
#
cat(paste("***** Brams-Kilgour Replication Data [+/-1.5%]", "\n")) ###############################
summary.plusminus1.5 <- summary.plusminus1.5[!(summary.plusminus1.5$Year==0),]#
		cat(paste("\n", "###########################################################################################################
", "********** Comparing new data to B-K", "**********", "\n", "##########################################################################################################")) #
####### - Select years to compare to B&K#
	 shortyr <- c(2000, 2004, 2008, 2012, 2016)#
summary.plusminus3.short <- summary.plusminus3[summary.plusminus3$Year %in% shortyr,]#
summary.plusminus5.short <- summary.plusminus5[summary.plusminus5$Year %in% shortyr,]#
bramskilgour.3.short <- bramskilgour.plusminus3[bramskilgour.plusminus3[,"year"] %in% shortyr,]#
bramskilgour.5.short <- bramskilgour.plusminus5[bramskilgour.plusminus5[,"year"] %in% shortyr,]#
#
short.summary <- data.frame(#
	CompetitiveStates = #
		cbind(summary.plusminus3.short[,"Competitive.States"], #
		summary.plusminus5.short[,"Competitive.States"]),#
	CompetitiveECvotes = #
		cbind(summary.plusminus3.short[,"Competitive.ECvotes"], #
		summary.plusminus5.short[,"Competitive.ECvotes"]),#
	DiffNonCompetitiveEC = #
		cbind(summary.plusminus3.short[,"Safe.Republican.ECvotes"] - summary.plusminus3.short[,"Safe.Democratic.ECvotes"], #
		summary.plusminus5.short[,"Safe.Republican.ECvotes"] - summary.plusminus5.short[,"Safe.Democratic.ECvotes"]),#
	R.Winningness = #
		cbind(bramskilgour.3.short[,"winningness"], #
		bramskilgour.5.short[,"winningness"]),#
	D.Winningness = #
		cbind(bramskilgour.3.short[,"winningness.1"], #
		bramskilgour.5.short[,"winningness.1"]),#
	R.Vulnerability = #
		cbind(bramskilgour.3.short[,"vulnerability"], #
		bramskilgour.5.short[,"vulnerability"]),#
	R.Fragility = #
		cbind(bramskilgour.3.short[,"fragility"], #
		bramskilgour.5.short[,"fragility"]),#
	D.Vulnerability = #
		cbind(bramskilgour.3.short[,"vulnerability.1"], #
		bramskilgour.5.short[,"vulnerability.1"]),#
	D.Fragility = #
		cbind(bramskilgour.3.short[,"fragility.1"], #
		bramskilgour.5.short[,"fragility.1"]),#
	ECOutcomeREP = summary.plusminus3.short[, "Rep.Total.ECwins"]/ summary.plusminus3.short[, "Total.ECvotes"]#
)#
#
	 bramskilgour.plusminus3$rep.ec.outcome <- summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"]#
		 ### Matching Winningness with Actual EC Outcomes#
		 noncompetediff <- summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"]#
		noncompete_winning <- #
			cbind(ifelse(noncompetediff > 0,1,0), #
			ifelse(bramskilgour.plusminus3[,"rep.ec.outcome"]>0.5, 1, 0))#
	 	match <- ifelse(noncompete_winning[,1]== noncompete_winning[,2], 1, 0)#
	 	data.frame(Year=uniqueyr, Match=match, SafeRepEC=summary.plusminus3[,"Safe.Republican.ECvotes"], SafeDemEC=summary.plusminus3[,"Safe.Democratic.ECvotes"])#
	 winningness_winning <- cbind(ifelse(bramskilgour.plusminus3[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus3[,"rep.ec.outcome"]>0.5,1,0))#
	 match2 <- ifelse(winningness_winning[,1]== winningness_winning[,2], 1, 0)#
cbind(uniqueyr, match2)#
		 ### Matching Winningness with Actual EC Outcomes: +-5%#
	 bramskilgour.plusminus5$rep.ec.outcome <- summary.plusminus5[, "Rep.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]#
		 noncompetediff5 <- summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"]#
		noncompete_winning5 <- cbind(ifelse(noncompetediff5 > 0,1,0), ifelse(bramskilgour.plusminus5[,"rep.ec.outcome"]>0.5,1,0))#
	 	match5 <- ifelse(noncompete_winning5[,1]== noncompete_winning5[,2], 1, 0)#
	 	cbind(uniqueyr, match5, summary.plusminus5[,"Safe.Republican.ECvotes"], summary.plusminus5[,"Safe.Democratic.ECvotes"])#
	 winningness_winning5 <- cbind(ifelse(bramskilgour.plusminus5[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus5[,"rep.ec.outcome"]>0.5,1,0))#
	 match5 <- ifelse(winningness_winning5[,1]== winningness_winning5[,2], 1, 0)#
cbind(uniqueyr, match5)#
#
		 ### Matching Winningness with Actual EC Outcomes: +- 1.5%#
	 bramskilgour.plusminus1.5$rep.ec.outcome <- summary.plusminus1.5[, "Rep.Total.ECwins"]/ summary.plusminus1.5[, "Total.ECvotes"]#
		 noncompetediff1.5 <- summary.plusminus1.5[,"Safe.Republican.ECvotes"] - summary.plusminus1.5[,"Safe.Democratic.ECvotes"]#
		noncompete_winning1.5 <- cbind(ifelse(noncompetediff1.5 > 0,1,0), ifelse(bramskilgour.plusminus1.5[,"rep.ec.outcome"]>0.5,1,0))#
	 	match1.5 <- ifelse(noncompete_winning1.5[,1]== noncompete_winning1.5[,2], 1, 0)#
	 	cbind(unique(summary.plusminus1.5$Year), match1.5, summary.plusminus1.5[,"Safe.Republican.ECvotes"], summary.plusminus1.5[,"Safe.Democratic.ECvotes"])#
	 winningness_winning1.5 <- cbind(ifelse(bramskilgour.plusminus1.5[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus1.5[,"rep.ec.outcome"]>0.5,1,0))#
	 match1.5 <- ifelse(winningness_winning1.5[,1]== winningness_winning1.5[,2], 1, 0)#
	 yrs <- match(bramskilgour.plusminus1.5$year, uniqueyr)#
cbind(uniqueyr[yrs], match1.5)#
#
###########################################################################################################
######################## - Shaw and Althaus Replication - ########################################################
##########################################################################################################	#
shaw <- read.csv("campaign_classifications.csv")#
#
shaw.all <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
#
shaw$code <- ifelse(shaw$classification=="Base Democratic", -1, ifelse(shaw$classification=="Battleground", 0, ifelse(shaw$classification=="Base Republican", 1, NA)))#
party.class <- numeric()#
for (yr in unique(shaw$year)) {#
	shaw.yr <- shaw[shaw$year==yr,]#
	d.yr <- d[d$year==yr,]#
	d.yr <- merge(shaw.yr, d.yr, by=c("state", "year"))#
	party.class <- rbind(party.class , cbind(yr, sum(d.yr$code[d.yr$party=="dem"] * d.yr$ecvotes[d.yr$party=="dem"], na.rm=TRUE), sum(d.yr$code[d.yr$party=="rep"] * d.yr$ecvotes[d.yr$party=="rep"], na.rm=TRUE)     ))#
	colnames(party.class) <- c("year", "dem", "rep")#
}#
### Candidate Perceptive of Election#
party.class#
### Battlegrounds From Either Party#
for (yr in unique(shaw$year)) {#
		shaw.yr.dem <- shaw[shaw$year==yr & shaw$party=="dem" & shaw$code==0,]#
		shaw.yr.rep <- shaw[shaw$year==yr & shaw$party=="rep" & shaw$code==0,]#
	battleground.yr <- unique(c(as.character(shaw.yr.dem$state), as.character(shaw.yr.rep$state)))#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
competitive <- d.yr[d.yr$state %in% battleground.yr,]#
noncompetitive <- d.yr[!(d.yr$state %in% battleground.yr),]#
##### - Non-Competitive Advantage#
shaw.all[shaw.all$Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
shaw.all[shaw.all$Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
shaw.all[shaw.all$Year==yr,"Competitive.States"] <- sum(competitive$s)#
shaw.all[shaw.all$Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
shaw.all[shaw.all$Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])/sum(d.yr$ecvotes)#
### - Average victory in Battlegrounds#
# pre.post.means[pre.post.means $Year==yr,"BaseDemocratic"] <-  mean(noncompetitive$pctREP[noncompetitive$pctREP<=0.5] - noncompetitive$pctDEM[noncompetitive$pctREP<=0.5])#
# pre.post.means[pre.post.means $Year==yr,"Battleground"] <-  mean(abs(d.yr$pctREP[d.yr$state %in% battleground.yr] - d.yr$pctDEM[d.yr$state %in% battleground.yr]))#
# pre.post.means[pre.post.means $Year==yr,"BaseRepublican"] <-  mean(noncompetitive$pctREP[noncompetitive$pctREP>=0.5] - noncompetitive$pctDEM[noncompetitive$pctREP>=0.5])#
#
	}#
#
NCregressions.all <-  data.frame(noncompetitiveadvantage = (shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"])/shaw.all[,"Total.ECvotes"], RepECOutcome = shaw.all[, "Rep.Total.ECwins"]/ shaw.all[, "Total.ECvotes"], competitive= shaw.all[,"Competitive.ECvotes"]/shaw.all[,"Total.ECvotes"])#
#
summary(nca_reg.all <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.all))#
#
### Matching Winningness with Actual EC Outcomes#
		 noncompetediff.all <- shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.all <- cbind(ifelse(noncompetediff.all > 0,1,0), ifelse(shaw.all[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.all <- ifelse(noncompete_winning.all[,1]== noncompete_winning.all[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.all==1, "check", ""), SafeRepEC= shaw.all[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.all[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage=shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC=round(shaw.all[,"Rep.Outcome.EC"], digits=2)) #
##########################################################################################################
####################### - Other specifications - ################################################################
##########################################################################################################
pre.post.means <- data.frame(Year=unique(shaw$year), BaseDemocraticD=NA, BaseDemocraticR=NA, BattlegroundD=NA, BattlegroundR=NA, BaseRepublicanD=NA, BaseRepublicanR=NA)#
## - Using only Democratic Strategies#
shaw.dem <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
shaw.d <- shaw[shaw$year==yr & shaw$party=="dem" , c("state", "code")]#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
		d.yr <- merge(d.yr, shaw.d, by="state")#
competitive <- d.yr[d.yr$code==0,]#
noncompetitive.d <- d.yr[d.yr$code==-1,]#
noncompetitive.r <- d.yr[d.yr$code==1,]#
shaw.dem[shaw.dem $Year==yr,"Total.States"] <- sum(competitive$s,na.rm=T) + sum(noncompetitive.d$s,na.rm=T) + sum(noncompetitive.r$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T) + sum(noncompetitive.d$s * noncompetitive.d$ecvotes,na.rm=T) + sum(noncompetitive.r$s * noncompetitive.r$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Competitive.States"] <- sum(competitive$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive.r$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive.d$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive.r$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive.d$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)/sum(d.yr$ecvotes,na.rm=T)#
#
pre.post.means[pre.post.means $Year==yr,"BaseDemocraticD"] <- mean(abs(noncompetitive.d$pctREP-noncompetitive.d$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BaseRepublicanD"] <- mean(abs(noncompetitive.r$pctREP-noncompetitive.r$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BattlegroundD"] <- mean(abs(competitive$pctREP-competitive$pctDEM), na.rm=TRUE)#
	}#
 noncompetediff.dem <- shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.dem <- cbind(ifelse(noncompetediff.dem > 0,1,0), ifelse(shaw.dem[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.dem <- ifelse(noncompete_winning.dem[,1]== noncompete_winning.dem[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.dem==1, "check", ""), SafeRepEC= shaw.dem[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.dem[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= round(shaw.dem[,"Rep.Outcome.EC"], digits=2))#
#
NCregressions.dem <-  data.frame(noncompetitiveadvantage = (shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], RepECOutcome = shaw.dem[, "Rep.Total.ECwins"]/ shaw.dem[, "Total.ECvotes"], competitive= shaw.dem[,"Competitive.ECvotes"]/shaw.dem[,"Total.ECvotes"])#
summary(nca_reg.dem <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.dem))#
##########################################################################################################
## - Using only Republican Strategies#
shaw.rep <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
shaw.r <- shaw[shaw$year==yr & shaw$party=="rep" , c("state", "code")]#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
		d.yr <- merge(d.yr, shaw.r, by="state")#
competitive <- d.yr[d.yr$code==0,]#
noncompetitive.d <- d.yr[d.yr$code==-1,]#
noncompetitive.r <- d.yr[d.yr$code==1,]#
shaw.rep[shaw.rep $Year==yr,"Total.States"] <- sum(competitive$s,na.rm=T) + sum(noncompetitive.d$s,na.rm=T) + sum(noncompetitive.r$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T) + sum(noncompetitive.d$s * noncompetitive.d$ecvotes,na.rm=T) + sum(noncompetitive.r$s * noncompetitive.r$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Competitive.States"] <- sum(competitive$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive.r$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive.d$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive.r$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive.d$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)/sum(d.yr$ecvotes,na.rm=T)#
#
pre.post.means[pre.post.means $Year==yr,"BaseDemocraticR"] <- mean(abs(noncompetitive.d$pctREP-noncompetitive.d$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BaseRepublicanR"] <- mean(abs(noncompetitive.r$pctREP-noncompetitive.r$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BattlegroundR"] <- mean(abs(competitive$pctREP-competitive$pctDEM), na.rm=TRUE)#
	}#
 noncompetediff.rep <- shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.rep <- cbind(ifelse(noncompetediff.rep > 0,1,0), ifelse(shaw.rep[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.rep <- ifelse(noncompete_winning.rep[,1]== noncompete_winning.rep[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.rep==1, "check", ""), SafeRepEC= shaw.rep[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.rep[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.rep[,"Rep.Outcome.EC"])#
#
NCregressions.rep <-  data.frame(noncompetitiveadvantage = (shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"], RepECOutcome = shaw.rep[, "Rep.Total.ECwins"]/ shaw.rep[, "Total.ECvotes"], competitive= shaw.rep[,"Competitive.ECvotes"]/shaw.rep[,"Total.ECvotes"])#
#
summary(nca_reg.rep <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.rep))#
##########################################################################################################
## - Using only matched Strategies#
shaw.match <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
		shaw.yr.dem <- shaw[shaw$year==yr & shaw$party=="dem" & shaw$code==0,]#
		shaw.yr.rep <- shaw[shaw$year==yr & shaw$party=="rep" & shaw$code==0,]#
	battleground.match <- as.character(shaw.yr.dem$state[as.character(shaw.yr.dem$state) %in% as.character(shaw.yr.rep$state)])#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
competitive <- d.yr[d.yr$state %in% battleground.match,]#
noncompetitive <- d.yr[!(d.yr$state %in% battleground.match),]#
shaw.match[shaw.match $Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
shaw.match[shaw.match $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
shaw.match[shaw.match $Year==yr,"Competitive.States"] <- sum(competitive$s)#
shaw.match[shaw.match $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
shaw.match[shaw.match $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])/sum(d.yr$ecvotes)#
	}#
 noncompetediff.match <- shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.match <- cbind(ifelse(noncompetediff.match > 0,1,0), ifelse(shaw.match[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.match <- ifelse(noncompete_winning.match[,1]== noncompete_winning.match[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.match==1, "check", ""), SafeRepEC= shaw.match[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.match[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.match[,"Rep.Outcome.EC"])#
#
NCregressions.match <-  data.frame(noncompetitiveadvantage = (shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], RepECOutcome = shaw.match[, "Rep.Total.ECwins"]/ shaw.match[, "Total.ECvotes"], competitive= shaw.match[,"Competitive.ECvotes"]/shaw.match[,"Total.ECvotes"])#
#
summary(nca_reg.match <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.match))#
stargazer(nca_reg.all, nca_reg.dem, nca_reg.rep, nca_reg.match, type="text", covariate.labels=c("Non Competitive Advantage"), add.lines=list(c("Restricted Model","NO","NO","YES","YES")), dep.var.labels.include=FALSE, df=FALSE, omit.stat = c("rsq", "f","ser"), column.separate=c(2,2), column.labels=c("Full Model", "Restricted Model")) #, out="Tables/appendixX.tex"#
#
cbind.data.frame(#
Year=unique(shaw$year),#
Model1=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], digits=2),#
Model1=ifelse(match.all==1, "check", ""), #
Model2=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], digits=2),#
Model2=ifelse(match.dem==1, "check", ""), #
Model3=round((shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"],digits=2),#
Model3=ifelse(match.rep==1, "check", ""), #
Model4=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"],digits=2),#
Model4=ifelse(match.match==1, "check", ""), #
EC.Outcome.REP=round(shaw.match[,"Rep.Outcome.EC"], digits=2))
table1
table1 <- data.frame(cbind(summary.plusminus3[,"Safe.Republican.ECvotes"], summary.plusminus3[,"Safe.Democratic.ECvotes"], summary.plusminus3[,"Rep.Total.ECwins"], summary.plusminus3[,"Dem.Total.ECwins"], round(summary.plusminus3[,"Rep.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), round(summary.plusminus3[,"Dem.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"], round((summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], digits=3) ))#
header.table1 <- c("Democratic EC Seats", "Republican EC Seats", "Rep EC Wins", "Dem EC Wins", "Republican %", "Democratic %", "Difference", "Difference %")#
colnames(table1) <- header.table1#
rownames(table1) <- uniqueyr
table1
pre.post.means
round(pre.post.means*100, digits=3)
round(pre.post.means[,-1]*100, digits=3)
cbind(pre.post.means,round(pre.post.means[,-1]*100, digits=3))
cbind(pre.post.means,round(pre.post.means[,-1]*100, digits=1))
cbind(pre.post.means[,1],round(pre.post.means[,-1]*100, digits=1))
cbind(pre.post.means[,1],paste0(round(pre.post.means[,-1]*100, digits=1),"%"))
cbind(pre.post.means[,1],round(pre.post.means[,-1]*100, digits=1))
table2 <- cbind(pre.post.means[,1],round(pre.post.means[,-1]*100, digits=1))#
stargazer(table2, type="text", style="AJPS",  summary=FALSE, out="/Users/jcervas/Dropbox/Non Competitive Electors/Tables/table2.txt", title="Average Victory Margins in Battleground States as Defined by Shaw and Althaus",  digits=3)
stargazer(table2, type="text", style="AJPS",  summary=FALSE, out="/Users/jcervas/Dropbox/Non Competitive Electors/Tables/table2.txt", title="Average Victory Margins in Battleground States as Defined by Shaw and Althaus")
stargazer(table2, type="text", style="AJPS",  summary=FALSE, out="/Users/jcervas/Dropbox/Non Competitive Electors/Tables/table2.txt", title="Average Victory Margins in Battleground States as Defined by Shaw and Althaus",  digits=1)
stargazer(table2, type="text", style="AJPS",  summary=FALSE, out="/Users/jcervas/Dropbox/Non Competitive Electors/Tables/table2.txt", title="Average Victory Margins in Battleground States as Defined by Shaw and Althaus",  digits=1, rownames=F)
table3 <- bramskilgour.plusminus3[,c("winningness", "vulnerability", "fragility", "winningness.1", "vulnerability.1", "fragility.1")]#
rownames(table3) <- uniqueyr
table3
table1 <- data.frame(cbind(summary.plusminus3[,"Safe.Republican.ECvotes"], summary.plusminus3[,"Safe.Democratic.ECvotes"], summary.plusminus3[,"Rep.Total.ECwins"], summary.plusminus3[,"Dem.Total.ECwins"], round(summary.plusminus3[,"Rep.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), round(summary.plusminus3[,"Dem.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"], round((summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], digits=3) ))
table1
rep.BK <- cbind(bramskilgour.plusminus3[,"winningness"], bramskilgour.plusminus3[,"vulnerability"], bramskilgour.plusminus3[,"fragility"], summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"])#
	colnames(rep.BK) <- c("winningness", "vulnerability", "fragility", "EC.Outcome.REP")#
	rownames(rep.BK) <- uniqueyr#
dem.BK <- cbind(bramskilgour.plusminus3[,"winningness.1"], bramskilgour.plusminus3[,"vulnerability.1"], bramskilgour.plusminus3[,"fragility.1"], summary.plusminus3[, "Dem.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"])#
	colnames(dem.BK) <- c("winningness", "vulnerability", "fragility", "EC.Outcome.DEM")#
	rownames(dem.BK) <- uniqueyr#
rep.cor <- cor(rep.BK, use="pairwise.complete.obs")#
dem.cor <- cor(dem.BK, use="pairwise.complete.obs")#
stargazer(dem.cor, rep.cor, type="text", title=c("Democratic Correlations", "Republican Correlations"), out="Tables/cor1.txt")#
	drop <- c(0,1)#
dem.BK.restricted <- dem.BK[!dem.BK[,"winningness"] %in% drop,]#
rep.BK.restricted <- rep.BK[!rep.BK[,"winningness"] %in% drop,]#
dem.cor.restricted <- cor(dem.BK.restricted, use="pairwise.complete.obs")#
rep.cor.restricted <- cor(rep.BK.restricted, use="pairwise.complete.obs")#
		cat(paste("\n", "********** Table 1", "**********", "\n")) #
#
			stargazer(dem.cor.restricted, rep.cor.restricted, type="text", title=c("Democratic Correlations [Restricted Model]", "Republican Correlations [Restricted Model]"), out="Tables/cor2.txt")
nca_reg
rep.BK <- data.frame(rep.BK, noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"])#
dem.BK <- data.frame(dem.BK, noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"])#
rep.BK.restricted <- rep.BK[!rep.BK[,"winningness"] %in% drop,]#
dem.BK.restricted <- dem.BK[!dem.BK[,"winningness"] %in% drop,]#
#
NCregressions <-  data.frame(noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], RepECOutcome = summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"], competitive= summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], winningness= bramskilgour.plusminus3[,"winningness"])#
#
summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions))#
#summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage + competitive, data = NCregressions))#
summary(w_reg <- lm(RepECOutcome ~ winningness, data = NCregressions))#
#
summary(w_reg_restricted <- lm(EC.Outcome.REP ~ winningness, data = rep.BK.restricted))
stargazer(nca_reg, w_reg, w_reg_restricted, type="text", omit.stat=c("rsq", "ser"), style="AJPS", title="Regressions with Non-Competitive Advantage vs Winningness to Predict Final Republican EC seat share", notes="Note: All Regressions calculated using plus or minus 3% as the definition of competitive state.", out="Tables/table3.txt")
stargazer(nca_reg_restricted, w_reg_restricted, type="text", omit.stat=c("rsq", "ser"), style="AJPS", title="Restricted Models, Regressions with Non-Competitive Advantage vs Winningness to Predict Final Republican EC seat share", notes="Note: All Regressions calculated using plus or minus 3% as the definition of competitive state.")
NCregressionsRestricted <-  data.frame(noncompetitiveadvantage = rep.BK.restricted$noncompetitiveadvantage, RepECOutcome = rep.BK.restricted$EC.Outcome.REP, winningness= rep.BK.restricted$winningness)#
summary(nca_reg_restricted <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressionsRestricted))#
#summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage + competitive, data = NCregressions))#
summary(w_reg_restricted <- lm(RepECOutcome ~ winningness, data = NCregressionsRestricted))#
#
stargazer(nca_reg_restricted, w_reg_restricted, type="text", omit.stat=c("rsq", "ser"), style="AJPS", title="Restricted Models, Regressions with Non-Competitive Advantage vs Winningness to Predict Final Republican EC seat share", notes="Note: All Regressions calculated using plus or minus 3% as the definition of competitive state.")
stargazer(regressBrams1R.restricted, regressBrams2R.restricted, regressBrams2D.restricted, regressBrams3R.restricted, regressBrams3D.restricted, type="text", title="Appendix: Predicting Electoral Outcomes using Winningness, Vulnerability, and Fragility", notes="Models restricted to Competitive elections, ie Winningness!= 1 or 0")
summary(regressBrams1R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"], na.action=na.exclude))#
	summary(regressBrams2R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"] + rep.BK.restricted[,"vulnerability"], na.action=na.exclude))#
	summary(regressBrams3R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"] + rep.BK.restricted[,"vulnerability"] + rep.BK.restricted[,"fragility"], na.action=na.exclude))#
#
	summary(regressBrams2D.restricted <-  lm( dem.BK.restricted[,"EC.Outcome.DEM"] ~ dem.BK.restricted[,"winningness"] + dem.BK.restricted[,"vulnerability"], na.action=na.exclude))#
	summary(regressBrams3D.restricted <-  lm( dem.BK.restricted[,"EC.Outcome.DEM"] ~ dem.BK.restricted[,"winningness"] + dem.BK.restricted[,"vulnerability"] + dem.BK.restricted[,"fragility"], na.action=na.exclude))#
#
stargazer(regressBrams1R.restricted, regressBrams2R.restricted, regressBrams2D.restricted, regressBrams3R.restricted, regressBrams3D.restricted, type="text", title="Appendix: Predicting Electoral Outcomes using Winningness, Vulnerability, and Fragility", notes="Models restricted to Competitive elections, ie Winningness!= 1 or 0")
rep.BK5 <- data.frame(cbind(bramskilgour.plusminus5[,"winningness"], bramskilgour.plusminus5[,"vulnerability"], bramskilgour.plusminus5[,"fragility"], noncompetitiveadvantage = (summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"])/summary.plusminus5[,"Total.ECvotes"], summary.plusminus5[, "Rep.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]))#
	colnames(rep.BK5) <- c("Winningness", "Vulnerability", "Fragility", "NonCompetitiveAdvantage", "EC.Outcome.REP")#
	rownames(rep.BK5) <- uniqueyr#
dem.BK5 <- data.frame(cbind(bramskilgour.plusminus5[,"winningness.1"], bramskilgour.plusminus5[,"vulnerability.1"], bramskilgour.plusminus5[,"fragility.1"], noncompetitiveadvantage = (summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"])/summary.plusminus5[,"Total.ECvotes"], summary.plusminus5[, "Dem.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]))#
	colnames(dem.BK5) <- c("Winningness", "Vulnerability", "Fragility", "NonCompetitiveAdvantage", "EC.Outcome.DEM")#
	rownames(dem.BK5) <- uniqueyr#
rep.cor5 <- cor(rep.BK5, use="pairwise.complete.obs")#
dem.cor5 <- cor(dem.BK5, use="pairwise.complete.obs")#
#
	drop <- c(0,1)#
dem.BK5.restricted <- dem.BK5[!dem.BK5[,"Winningness"] %in% drop,]#
rep.BK5.restricted <- rep.BK5[!rep.BK5[,"Winningness"] %in% drop,]
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, type="latex", covariate.labels=c("Non Competitive Advantage", "Winningness"), add.lines=list(c("Restricted Model","NO","NO","YES","YES")), dep.var.labels.include=FALSE, df=FALSE, omit.stat = c("rsq", "f","ser"), column.separate=c(2,2), column.labels=c("Full Model", "Restricted Model"), out="Tables/tableB2.tex")
summary(reg51 <- lm(EC.Outcome.REP ~ NonCompetitiveAdvantage, data= rep.BK5))#
summary(reg52 <- lm(EC.Outcome.REP ~ Winningness, data= rep.BK5))#
#
summary(reg5restricted1 <- lm(EC.Outcome.REP ~ NonCompetitiveAdvantage, data= rep.BK5.restricted))#
summary(reg5restricted2 <- lm(EC.Outcome.REP ~ Winningness, data= rep.BK5.restricted))
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, type="latex", covariate.labels=c("Non Competitive Advantage", "Winningness"), add.lines=list(c("Restricted Model","NO","NO","YES","YES")), dep.var.labels.include=FALSE, df=FALSE, omit.stat = c("rsq", "f","ser"), column.separate=c(2,2), column.labels=c("Full Model", "Restricted Model"), out="Tables/tableB2.tex")
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, type="text", covariate.labels=c("Non Competitive Advantage", "Winningness"), add.lines=list(c("Restricted Model","NO","NO","YES","YES")), dep.var.labels.include=FALSE, df=FALSE, omit.stat = c("rsq", "f","ser"), column.separate=c(2,2), column.labels=c("Full Model", "Restricted Model"), out="Tables/tableB2.tex")
cbind.data.frame(#
Year=unique(shaw$year),#
Model1=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], digits=2),#
Model1=ifelse(match.all==1, "check", ""), #
Model2=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], digits=2),#
Model2=ifelse(match.dem==1, "check", ""), #
Model3=round((shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"],digits=2),#
Model3=ifelse(match.rep==1, "check", ""), #
Model4=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"],digits=2),#
Model4=ifelse(match.match==1, "check", ""), #
EC.Outcome.REP=round(shaw.match[,"Rep.Outcome.EC"], digits=2))
stargazer(nca_reg.all, nca_reg.dem, nca_reg.rep, nca_reg.match, type="text", covariate.labels=c("Non Competitive Advantage"), add.lines=list(c("Restricted Model","NO","NO","YES","YES")), dep.var.labels.include=FALSE, df=FALSE, omit.stat = c("rsq", "f","ser"), column.separate=c(2,2), column.labels=c("Full Model", "Restricted Model")) #, out="Tables/appendixX.tex"
NCregressions.match <-  data.frame(noncompetitiveadvantage = (shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], RepECOutcome = shaw.match[, "Rep.Total.ECwins"]/ shaw.match[, "Total.ECvotes"], competitive= shaw.match[,"Competitive.ECvotes"]/shaw.match[,"Total.ECvotes"])
NCregressions.match
data.frame(Year=unique(shaw$year), Match=ifelse(match.match==1, "check", ""), SafeRepEC= shaw.match[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.match[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.match[,"Rep.Outcome.EC"])
NCregressions.all <-  data.frame(noncompetitiveadvantage = (shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"])/shaw.all[,"Total.ECvotes"], RepECOutcome = shaw.all[, "Rep.Total.ECwins"]/ shaw.all[, "Total.ECvotes"], competitive= shaw.all[,"Competitive.ECvotes"]/shaw.all[,"Total.ECvotes"])
NCregressions.all
data.frame(Year=unique(shaw$year), Match=ifelse(match.all==1, "check", ""), SafeRepEC= shaw.all[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.all[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage=shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC=round(shaw.all[,"Rep.Outcome.EC"], digits=2))
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			titale="Regression tables using the ± 5% definition of competitive" #
			out="Tables/tableB2.tex")
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			titale="Regression tables using the +/- 5% definition of competitive" #
			out="Tables/tableB2.tex")
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			title="Regression tables using the ± 5% definition of competitive" #
			out="Tables/tableB2.tex")
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			title="Regression tables using the +/- 5% definition of competitive" #
			out="Tables/tableB2.tex")
stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			title="Regression tables using the ± 5% definition of competitive" ,#
			out="Tables/tableB2.tex")
###########################################################################################################
###########################################################################################################
###########################################################################################################
###########################################################################################################
### Code to Replicate "Why noncompetitive states are so important for understanding the outcomes of competitive elections: the Electoral College 1868-2016"#
### Accepted - Public Choice#
### Jonathan R. Cervas, University of California Irvine#
### Bernard N. Grofman, University of California Irvine#
### Notes: #
### 1960 and 1976 have too many coalitons to calculate when we go to +-5%, so they are excluded.  #
### All calulations are done by taking the two-party vote, ie, DEM/(DEM+REP) or (REP/DEM+REP).#
### Running funtction to get Winningness and other B+K calculations takes a long time, so they are commented out and just imports data from CSV for further calculations.#
###########################################################################################################
###########################################################################################################
### Remove all objects just to be safe.#
			rm(list=ls(all=TRUE))#
#
setwd("/Users/jcervas/Dropbox/Non Competitive Electors")#
options(scipen=999) # Turn off Scientific Notation#
###########################################################################################################
########### - Libraries - ############
###########################################################################################################
library(stargazer)#
#
###########################################################################################################
######### - Functions - #############
###########################################################################################################
source("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/winningness.R")#
#
###########################################################################################################
######### - Read in Data from internet - #############
###########################################################################################################
		cat(paste("\n", "********** Read in Brams-Kilgour Replication Data [+/-3%]", "**********", "\n")) #
	bramskilgour.plusminus3 <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/bramskilgourplusminus3.csv")#
		cat(paste("\n", "********** Read in Brams-Kilgour Replication Data [+/-5%]", "**********", "\n")) #
	bramskilgour.plusminus5 <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/bramskilgourplusminus5.csv")#
		cat(paste("\n", "********** Read in Presidential Election Data", "**********", "\n")) #
	d <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/Presidential_Election_General_Two_Party.csv")#
###########################################################################################################
########## - Election Data Set-up - #############
###########################################################################################################
	 d$tptotal <- d$dem+d$rep#
	 d$pctREP <- d$rep/d$tptotal#
	 d$pctDEM <- d$dem/d$tptotal#
d <- d[d$year>1867,] #
uniqueyr <- unique(d$year)#
#
###########################################################################################################
########## - Non-Competitive Summary - ################
##########################################################################################################	 #
ptm <- proc.time()#
bramskilgour <- numeric(0)#
competitive.low <- 0.47#
competitive.high <- 0.53#
#
summary.plusminus3 <- #
	data.frame(Year=uniqueyr, #
	Total.States=NA, #
	Total.ECvotes=NA, #
	Safe.Republican.States=NA, #
	Safe.Democratic.States=NA, #
	Competitive.States=NA, #
	Safe.Republican.ECvotes=NA, #
	Safe.Democratic.ECvotes=NA, #
	Competitive.ECvotes=NA, #
	Rep.Competitive.Wins=NA, #
	Dem.Competitive.Wins=NA, #
	Rep.Total.ECwins =NA, #
	Dem.Total.ECwins =NA)	 #
#
correlate3independence <- #
	data.frame(Year=uniqueyr, #
	Rep.st.NonCompetitive=NA, #
	Rep.st.Competitive=NA, #
	Rep.EC.NonCompetitive=NA, #
	Rep.EC.Competitive=NA)#
for (yr in uniqueyr){#
	e <- d[d$year==yr,]#
		noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP),]#
		compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP),]#
#
noncompetitive <- #
	data.frame(#
	state=NA, #
	pctREP=NA, #
	ecvotes=NA)#
competitive <- #
	data.frame(state=NA, #
	pctREP=NA, #
	ecvotes=NA)	#
noncompetitive[1:length(noncompet$state),1] <- noncompet$state#
noncompetitive[1:length(noncompet$state),2] <- noncompet$pctREP#
noncompetitive[1:length(noncompet$state),3] <- noncompet$ecvotes#
noncompetitive$s <- 1#
#
competitive[1:length(compet$state),1] <- compet$state#
competitive[1:length(compet$state),2] <- compet$pctREP#
competitive[1:length(compet$state),3] <- compet$ecvotes#
competitive$s <- 1	#
summary.plusminus3[summary.plusminus3$Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
summary.plusminus3[summary.plusminus3$Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
summary.plusminus3[summary.plusminus3$Year==yr,"Competitive.States"] <- sum(competitive$s)#
summary.plusminus3[summary.plusminus3$Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
summary.plusminus3[summary.plusminus3$Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP<.5])#
#
####### - Run this to generate +-3% numbers	#
# # # winning <- numeric(0) # Place holder for quicker run times#
# # # winning <- winningness(e, "ecvotes", "pctDEM", "pctREP",competitive.high, competitive.low) #
# # # bramskilgour <- rbind(bramskilgour,winning)#
#
####### - Correlating Republican share of victories and Republican share of EC seat in Competitive and Non-Competitive States#
correlate3independence[correlate3independence$Year==yr,"Rep.st.NonCompetitive"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])/sum(noncompetitive$s)#
correlate3independence[correlate3independence$Year==yr,"Rep.st.Competitive"] <- sum(competitive$s[competitive$pctREP>.5])/sum(noncompetitive$s)#
correlate3independence[correlate3independence$Year==yr,"Rep.EC.NonCompetitive"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])/sum(noncompetitive$ecvotes)#
correlate3independence[correlate3independence$Year==yr,"Rep.EC.Competitive"] <- sum(competitive$ecvotes[competitive$pctREP>.5])/sum(competitive$ecvotes)#
}#
# # # write.csv(bramskilgour, "bramskilgourplusminus3.csv", row.names=FALSE)#
proc.time() - ptm#
#
###########################################################################################################
cat(paste("########################################################################################################## \n","***** Correlation tests", "\n"))#
cat(paste("***** Correlation tests", "\n")) ###############################
	 cor.test(correlate3independence[,"Rep.st.NonCompetitive"],correlate3independence[,"Rep.st.Competitive"])#
	 cor.test(correlate3independence[,"Rep.EC.NonCompetitive"],correlate3independence[,"Rep.EC.Competitive"]) #
###########################################################################################################
########## - Sensitivity Analysis +-5% - ##################################################################
##########################################################################################################	 #
	 competitive.low <- 0.45#
	 competitive.high <- 0.55#
	 summary.plusminus5 <- #
	 	data.frame(Year=uniqueyr, #
	 	Total.States=NA, #
	 	Total.ECvotes=NA, #
	 	Safe.Republican.States=NA, #
	 	Safe.Democratic.States=NA, #
	 	Competitive.States=NA, #
	 	Safe.Republican.ECvotes=NA, #
	 	Safe.Democratic.ECvotes=NA, #
	 	Competitive.ECvotes=NA, #
	 	Rep.Competitive.Wins=NA, #
	 	Dem.Competitive.Wins=NA, #
	 	Rep.Total.ECwins =NA, #
	 	Dem.Total.ECwins =NA)#
	summary.plusminus5 <- #
		data.frame(Year=uniqueyr, #
		Total.States=NA, #
		Total.ECvotes=NA, #
		Safe.Republican.States=NA, #
		Safe.Democratic.States=NA, #
		Competitive.States=NA, #
		Safe.Republican.ECvotes=NA, #
		Safe.Democratic.ECvotes=NA, #
		Competitive.ECvotes=NA, #
		Rep.Competitive.Wins=NA, #
		Dem.Competitive.Wins=NA, #
		Rep.Total.ECwins =NA, #
		Dem.Total.ECwins =NA)	#
 uniqueyr <- seq(1868,2016, 4)#
for (yr in uniqueyr) {#
	e <- d[d$year == yr, ]#
#
	noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP), ]#
	compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), ]#
#
	noncompetitive2 <- data.frame(state = noncompet$state, pctREP = NA, ecvotes = NA, s = 1)#
	competitive2 <- data.frame(state = compet$state, pctREP = NA, ecvotes = NA, s = 1)#
#
	noncompetitive2[1:length(noncompet$state), 1] <- noncompet$state#
	noncompetitive2[1:length(noncompet$state), 2] <- noncompet$pctREP#
	noncompetitive2[1:length(noncompet$state), 3] <- noncompet$ecvotes#
#
	competitive2[1:length(compet$state), 1] <- compet$state#
	competitive2[1:length(compet$state), 2] <- compet$pctREP#
	competitive2[1:length(compet$state), 3] <- compet$ecvotes#
#
	summary.plusminus5[summary.plusminus5$Year == yr, "Total.States"] <- sum(competitive2$s) + sum(noncompetitive2$s)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Total.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes) + sum(noncompetitive2$s * #
		noncompetitive2$ecvotes)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Competitive.States"] <- sum(competitive2$s)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Competitive.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Dem.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Rep.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP > 0.5])#
#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Republican.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Democratic.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Republican.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Democratic.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP < 0.5])#
	####### - Run this to generate +-5% numbers	#
	# # # winning10 <- numeric(0) # Place holder for quicker run times#
# # # winning10 <- winningness(e, "ecvotes", "pctDEM", "pctREP", competitive.high, competitive.low) #
# # # bramskilgour.plusminus5 <- rbind(bramskilgour.plusminus5,winning10)#
} #
# # # write.csv(bramskilgour.plusminus5, "bramskilgour.plusminus5.csv")#
#
###########################################################################################################
########## - Sensitivity Analysis +/- 1.5% - #####################################################################
##########################################################################################################	 #
	 competitive.low <- 0.485#
	 competitive.high <- 0.515#
	 bramskilgour.plusminus1.5 <- numeric(0)#
	 summary.plusminus1.5 <- #
	 	data.frame(Year = uniqueyr, #
	 	Total.States = NA, #
	 	Total.ECvotes = NA, #
	 	Safe.Republican.States = NA, #
	 	Safe.Democratic.States = NA, #
	 	Competitive.States = NA, #
	 	Safe.Republican.ECvotes = NA, #
	 	Safe.Democratic.ECvotes = NA, #
	 	Competitive.ECvotes = NA, #
	 	Rep.Competitive.Wins = NA, #
	 	Dem.Competitive.Wins = NA, #
	 	Rep.Total.ECwins = NA, #
	 	Dem.Total.ECwins = NA)#
	 summary.plusminus1.5 <- #
	 	data.frame(Year = uniqueyr, #
	 	Total.States = NA, #
	 	Total.ECvotes = NA, #
	 	Safe.Republican.States = NA, #
	 	Safe.Democratic.States = NA, #
	 	Competitive.States = NA, #
	 	Safe.Republican.ECvotes = NA, #
	 	Safe.Democratic.ECvotes = NA, #
	 	Competitive.ECvotes = NA, #
	 	Rep.Competitive.Wins = NA, #
	 	Dem.Competitive.Wins = NA, #
	 	Rep.Total.ECwins = NA, #
	 	Dem.Total.ECwins = NA)	#
 uniqueyr <- seq(1868, 2016, 4)#
 for (yr in uniqueyr) {#
 	e <- d[d$year == yr, ]#
 	is.competitive <- ifelse(e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), is.competitive <- 1, is.competitive <- 0)#
#
 	if (sum(is.competitive) < 1) {#
 		summary.plusminus1.5[summary.plusminus1.5$Year == yr, ] <- 0#
 	}#
 	if (sum(is.competitive) < 1) {#
 		next#
 	}#
 	noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP), ]#
 	compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), ]#
#
 	noncompetitive2 <- #
 		data.frame(state = noncompet$state, #
 		pctREP = NA, #
 		ecvotes = NA, #
 		s = 1)#
 	competitive2 <- #
 		data.frame(state = compet$state, #
 		pctREP = NA, #
 		ecvotes = NA, #
 		s = 1)#
#
 	noncompetitive2[1:length(noncompet$state), 1] <- noncompet$state#
 	noncompetitive2[1:length(noncompet$state), 2] <- noncompet$pctREP#
 	noncompetitive2[1:length(noncompet$state), 3] <- noncompet$ecvotes#
#
 	competitive2[1:length(compet$state), 1] <- compet$state#
 	competitive2[1:length(compet$state), 2] <- compet$pctREP#
 	competitive2[1:length(compet$state), 3] <- compet$ecvotes#
#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Total.States"] <- sum(competitive2$s) + sum(noncompetitive2$s)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Total.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes) + sum(noncompetitive2$s * #
 		noncompetitive2$ecvotes)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Competitive.States"] <- sum(competitive2$s)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Competitive.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Dem.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Rep.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP > 0.5])#
#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Republican.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Democratic.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Republican.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Democratic.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP < 0.5])#
#
 	####### - Run this to generate +-5% numbers	#
 	winning1.5 <- numeric(0) # Place holder for quicker run times#
 	winning1.5 <- winningness(e, "ecvotes", "pctDEM", "pctREP", competitive.high, competitive.low)#
 	bramskilgour.plusminus1.5 <- rbind(bramskilgour.plusminus1.5, winning1.5)#
 }#
#
cat(paste("***** Brams-Kilgour Replication Data [+/-1.5%]", "\n")) ###############################
summary.plusminus1.5 <- summary.plusminus1.5[!(summary.plusminus1.5$Year==0),]#
		cat(paste("\n", "###########################################################################################################
", "********** Comparing new data to B-K", "**********", "\n", "##########################################################################################################")) #
####### - Select years to compare to B&K#
	 shortyr <- c(2000, 2004, 2008, 2012, 2016)#
summary.plusminus3.short <- summary.plusminus3[summary.plusminus3$Year %in% shortyr,]#
summary.plusminus5.short <- summary.plusminus5[summary.plusminus5$Year %in% shortyr,]#
bramskilgour.3.short <- bramskilgour.plusminus3[bramskilgour.plusminus3[,"year"] %in% shortyr,]#
bramskilgour.5.short <- bramskilgour.plusminus5[bramskilgour.plusminus5[,"year"] %in% shortyr,]#
#
short.summary <- data.frame(#
	CompetitiveStates = #
		cbind(summary.plusminus3.short[,"Competitive.States"], #
		summary.plusminus5.short[,"Competitive.States"]),#
	CompetitiveECvotes = #
		cbind(summary.plusminus3.short[,"Competitive.ECvotes"], #
		summary.plusminus5.short[,"Competitive.ECvotes"]),#
	DiffNonCompetitiveEC = #
		cbind(summary.plusminus3.short[,"Safe.Republican.ECvotes"] - summary.plusminus3.short[,"Safe.Democratic.ECvotes"], #
		summary.plusminus5.short[,"Safe.Republican.ECvotes"] - summary.plusminus5.short[,"Safe.Democratic.ECvotes"]),#
	R.Winningness = #
		cbind(bramskilgour.3.short[,"winningness"], #
		bramskilgour.5.short[,"winningness"]),#
	D.Winningness = #
		cbind(bramskilgour.3.short[,"winningness.1"], #
		bramskilgour.5.short[,"winningness.1"]),#
	R.Vulnerability = #
		cbind(bramskilgour.3.short[,"vulnerability"], #
		bramskilgour.5.short[,"vulnerability"]),#
	R.Fragility = #
		cbind(bramskilgour.3.short[,"fragility"], #
		bramskilgour.5.short[,"fragility"]),#
	D.Vulnerability = #
		cbind(bramskilgour.3.short[,"vulnerability.1"], #
		bramskilgour.5.short[,"vulnerability.1"]),#
	D.Fragility = #
		cbind(bramskilgour.3.short[,"fragility.1"], #
		bramskilgour.5.short[,"fragility.1"]),#
	ECOutcomeREP = summary.plusminus3.short[, "Rep.Total.ECwins"]/ summary.plusminus3.short[, "Total.ECvotes"]#
)#
#
	 bramskilgour.plusminus3$rep.ec.outcome <- summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"]#
		 ### Matching Winningness with Actual EC Outcomes#
		 noncompetediff <- summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"]#
		noncompete_winning <- #
			cbind(ifelse(noncompetediff > 0,1,0), #
			ifelse(bramskilgour.plusminus3[,"rep.ec.outcome"]>0.5, 1, 0))#
	 	match <- ifelse(noncompete_winning[,1]== noncompete_winning[,2], 1, 0)#
	 	data.frame(Year=uniqueyr, Match=match, SafeRepEC=summary.plusminus3[,"Safe.Republican.ECvotes"], SafeDemEC=summary.plusminus3[,"Safe.Democratic.ECvotes"])#
	 winningness_winning <- cbind(ifelse(bramskilgour.plusminus3[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus3[,"rep.ec.outcome"]>0.5,1,0))#
	 match2 <- ifelse(winningness_winning[,1]== winningness_winning[,2], 1, 0)#
cbind(uniqueyr, match2)#
		 ### Matching Winningness with Actual EC Outcomes: +-5%#
	 bramskilgour.plusminus5$rep.ec.outcome <- summary.plusminus5[, "Rep.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]#
		 noncompetediff5 <- summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"]#
		noncompete_winning5 <- cbind(ifelse(noncompetediff5 > 0,1,0), ifelse(bramskilgour.plusminus5[,"rep.ec.outcome"]>0.5,1,0))#
	 	match5 <- ifelse(noncompete_winning5[,1]== noncompete_winning5[,2], 1, 0)#
	 	cbind(uniqueyr, match5, summary.plusminus5[,"Safe.Republican.ECvotes"], summary.plusminus5[,"Safe.Democratic.ECvotes"])#
	 winningness_winning5 <- cbind(ifelse(bramskilgour.plusminus5[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus5[,"rep.ec.outcome"]>0.5,1,0))#
	 match5 <- ifelse(winningness_winning5[,1]== winningness_winning5[,2], 1, 0)#
cbind(uniqueyr, match5)#
#
		 ### Matching Winningness with Actual EC Outcomes: +- 1.5%#
	 bramskilgour.plusminus1.5$rep.ec.outcome <- summary.plusminus1.5[, "Rep.Total.ECwins"]/ summary.plusminus1.5[, "Total.ECvotes"]#
		 noncompetediff1.5 <- summary.plusminus1.5[,"Safe.Republican.ECvotes"] - summary.plusminus1.5[,"Safe.Democratic.ECvotes"]#
		noncompete_winning1.5 <- cbind(ifelse(noncompetediff1.5 > 0,1,0), ifelse(bramskilgour.plusminus1.5[,"rep.ec.outcome"]>0.5,1,0))#
	 	match1.5 <- ifelse(noncompete_winning1.5[,1]== noncompete_winning1.5[,2], 1, 0)#
	 	cbind(unique(summary.plusminus1.5$Year), match1.5, summary.plusminus1.5[,"Safe.Republican.ECvotes"], summary.plusminus1.5[,"Safe.Democratic.ECvotes"])#
	 winningness_winning1.5 <- cbind(ifelse(bramskilgour.plusminus1.5[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus1.5[,"rep.ec.outcome"]>0.5,1,0))#
	 match1.5 <- ifelse(winningness_winning1.5[,1]== winningness_winning1.5[,2], 1, 0)#
	 yrs <- match(bramskilgour.plusminus1.5$year, uniqueyr)#
cbind(uniqueyr[yrs], match1.5)#
#
###########################################################################################################
######################## - Shaw and Althaus Replication - ########################################################
##########################################################################################################	#
shaw <- read.csv("campaign_classifications.csv")#
#
shaw.all <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
#
shaw$code <- ifelse(shaw$classification=="Base Democratic", -1, ifelse(shaw$classification=="Battleground", 0, ifelse(shaw$classification=="Base Republican", 1, NA)))#
party.class <- numeric()#
for (yr in unique(shaw$year)) {#
	shaw.yr <- shaw[shaw$year==yr,]#
	d.yr <- d[d$year==yr,]#
	d.yr <- merge(shaw.yr, d.yr, by=c("state", "year"))#
	party.class <- rbind(party.class , cbind(yr, sum(d.yr$code[d.yr$party=="dem"] * d.yr$ecvotes[d.yr$party=="dem"], na.rm=TRUE), sum(d.yr$code[d.yr$party=="rep"] * d.yr$ecvotes[d.yr$party=="rep"], na.rm=TRUE)     ))#
	colnames(party.class) <- c("year", "dem", "rep")#
}#
### Candidate Perceptive of Election#
party.class#
### Battlegrounds From Either Party#
for (yr in unique(shaw$year)) {#
		shaw.yr.dem <- shaw[shaw$year==yr & shaw$party=="dem" & shaw$code==0,]#
		shaw.yr.rep <- shaw[shaw$year==yr & shaw$party=="rep" & shaw$code==0,]#
	battleground.yr <- unique(c(as.character(shaw.yr.dem$state), as.character(shaw.yr.rep$state)))#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
competitive <- d.yr[d.yr$state %in% battleground.yr,]#
noncompetitive <- d.yr[!(d.yr$state %in% battleground.yr),]#
##### - Non-Competitive Advantage#
shaw.all[shaw.all$Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
shaw.all[shaw.all$Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
shaw.all[shaw.all$Year==yr,"Competitive.States"] <- sum(competitive$s)#
shaw.all[shaw.all$Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
shaw.all[shaw.all$Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])/sum(d.yr$ecvotes)#
### - Average victory in Battlegrounds#
# pre.post.means[pre.post.means $Year==yr,"BaseDemocratic"] <-  mean(noncompetitive$pctREP[noncompetitive$pctREP<=0.5] - noncompetitive$pctDEM[noncompetitive$pctREP<=0.5])#
# pre.post.means[pre.post.means $Year==yr,"Battleground"] <-  mean(abs(d.yr$pctREP[d.yr$state %in% battleground.yr] - d.yr$pctDEM[d.yr$state %in% battleground.yr]))#
# pre.post.means[pre.post.means $Year==yr,"BaseRepublican"] <-  mean(noncompetitive$pctREP[noncompetitive$pctREP>=0.5] - noncompetitive$pctDEM[noncompetitive$pctREP>=0.5])#
#
	}#
#
NCregressions.all <-  data.frame(noncompetitiveadvantage = (shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"])/shaw.all[,"Total.ECvotes"], RepECOutcome = shaw.all[, "Rep.Total.ECwins"]/ shaw.all[, "Total.ECvotes"], competitive= shaw.all[,"Competitive.ECvotes"]/shaw.all[,"Total.ECvotes"])#
#
summary(nca_reg.all <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.all))#
#
### Matching Winningness with Actual EC Outcomes#
		 noncompetediff.all <- shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.all <- cbind(ifelse(noncompetediff.all > 0,1,0), ifelse(shaw.all[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.all <- ifelse(noncompete_winning.all[,1]== noncompete_winning.all[,2], 1, 0)#
##########################################################################################################
####################### - Other specifications - ################################################################
##########################################################################################################
pre.post.means <- data.frame(Year=unique(shaw$year), BaseDemocraticD=NA, BaseDemocraticR=NA, BattlegroundD=NA, BattlegroundR=NA, BaseRepublicanD=NA, BaseRepublicanR=NA)#
## - Using only Democratic Strategies#
shaw.dem <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
shaw.d <- shaw[shaw$year==yr & shaw$party=="dem" , c("state", "code")]#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
		d.yr <- merge(d.yr, shaw.d, by="state")#
competitive <- d.yr[d.yr$code==0,]#
noncompetitive.d <- d.yr[d.yr$code==-1,]#
noncompetitive.r <- d.yr[d.yr$code==1,]#
shaw.dem[shaw.dem $Year==yr,"Total.States"] <- sum(competitive$s,na.rm=T) + sum(noncompetitive.d$s,na.rm=T) + sum(noncompetitive.r$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T) + sum(noncompetitive.d$s * noncompetitive.d$ecvotes,na.rm=T) + sum(noncompetitive.r$s * noncompetitive.r$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Competitive.States"] <- sum(competitive$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive.r$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive.d$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive.r$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive.d$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)/sum(d.yr$ecvotes,na.rm=T)#
#
pre.post.means[pre.post.means $Year==yr,"BaseDemocraticD"] <- mean(abs(noncompetitive.d$pctREP-noncompetitive.d$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BaseRepublicanD"] <- mean(abs(noncompetitive.r$pctREP-noncompetitive.r$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BattlegroundD"] <- mean(abs(competitive$pctREP-competitive$pctDEM), na.rm=TRUE)#
	}#
 noncompetediff.dem <- shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.dem <- cbind(ifelse(noncompetediff.dem > 0,1,0), ifelse(shaw.dem[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.dem <- ifelse(noncompete_winning.dem[,1]== noncompete_winning.dem[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.dem==1, "check", ""), SafeRepEC= shaw.dem[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.dem[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= round(shaw.dem[,"Rep.Outcome.EC"], digits=2))#
#
NCregressions.dem <-  data.frame(noncompetitiveadvantage = (shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], RepECOutcome = shaw.dem[, "Rep.Total.ECwins"]/ shaw.dem[, "Total.ECvotes"], competitive= shaw.dem[,"Competitive.ECvotes"]/shaw.dem[,"Total.ECvotes"])#
summary(nca_reg.dem <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.dem))#
##########################################################################################################
## - Using only Republican Strategies#
shaw.rep <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
shaw.r <- shaw[shaw$year==yr & shaw$party=="rep" , c("state", "code")]#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
		d.yr <- merge(d.yr, shaw.r, by="state")#
competitive <- d.yr[d.yr$code==0,]#
noncompetitive.d <- d.yr[d.yr$code==-1,]#
noncompetitive.r <- d.yr[d.yr$code==1,]#
shaw.rep[shaw.rep $Year==yr,"Total.States"] <- sum(competitive$s,na.rm=T) + sum(noncompetitive.d$s,na.rm=T) + sum(noncompetitive.r$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T) + sum(noncompetitive.d$s * noncompetitive.d$ecvotes,na.rm=T) + sum(noncompetitive.r$s * noncompetitive.r$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Competitive.States"] <- sum(competitive$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive.r$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive.d$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive.r$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive.d$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)/sum(d.yr$ecvotes,na.rm=T)#
#
pre.post.means[pre.post.means $Year==yr,"BaseDemocraticR"] <- mean(abs(noncompetitive.d$pctREP-noncompetitive.d$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BaseRepublicanR"] <- mean(abs(noncompetitive.r$pctREP-noncompetitive.r$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BattlegroundR"] <- mean(abs(competitive$pctREP-competitive$pctDEM), na.rm=TRUE)#
	}#
 noncompetediff.rep <- shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.rep <- cbind(ifelse(noncompetediff.rep > 0,1,0), ifelse(shaw.rep[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.rep <- ifelse(noncompete_winning.rep[,1]== noncompete_winning.rep[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.rep==1, "check", ""), SafeRepEC= shaw.rep[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.rep[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.rep[,"Rep.Outcome.EC"])#
#
NCregressions.rep <-  data.frame(noncompetitiveadvantage = (shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"], RepECOutcome = shaw.rep[, "Rep.Total.ECwins"]/ shaw.rep[, "Total.ECvotes"], competitive= shaw.rep[,"Competitive.ECvotes"]/shaw.rep[,"Total.ECvotes"])#
#
summary(nca_reg.rep <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.rep))#
##########################################################################################################
## - Using only matched Strategies#
shaw.match <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
		shaw.yr.dem <- shaw[shaw$year==yr & shaw$party=="dem" & shaw$code==0,]#
		shaw.yr.rep <- shaw[shaw$year==yr & shaw$party=="rep" & shaw$code==0,]#
	battleground.match <- as.character(shaw.yr.dem$state[as.character(shaw.yr.dem$state) %in% as.character(shaw.yr.rep$state)])#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
competitive <- d.yr[d.yr$state %in% battleground.match,]#
noncompetitive <- d.yr[!(d.yr$state %in% battleground.match),]#
shaw.match[shaw.match $Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
shaw.match[shaw.match $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
shaw.match[shaw.match $Year==yr,"Competitive.States"] <- sum(competitive$s)#
shaw.match[shaw.match $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
shaw.match[shaw.match $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])/sum(d.yr$ecvotes)#
	}#
 noncompetediff.match <- shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.match <- cbind(ifelse(noncompetediff.match > 0,1,0), ifelse(shaw.match[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.match <- ifelse(noncompete_winning.match[,1]== noncompete_winning.match[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.match==1, "check", ""), SafeRepEC= shaw.match[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.match[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.match[,"Rep.Outcome.EC"])#
#
NCregressions.match <-  data.frame(noncompetitiveadvantage = (shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], RepECOutcome = shaw.match[, "Rep.Total.ECwins"]/ shaw.match[, "Total.ECvotes"], competitive= shaw.match[,"Competitive.ECvotes"]/shaw.match[,"Total.ECvotes"])#
#
summary(nca_reg.match <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.match))#
#############################################################################################################
################################ - TABLES - #################################################################
#############################################################################################################
################### - Table 1:#
rep.BK <- cbind(bramskilgour.plusminus3[,"winningness"], bramskilgour.plusminus3[,"vulnerability"], bramskilgour.plusminus3[,"fragility"], summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"])#
	colnames(rep.BK) <- c("winningness", "vulnerability", "fragility", "EC.Outcome.REP")#
	rownames(rep.BK) <- uniqueyr#
dem.BK <- cbind(bramskilgour.plusminus3[,"winningness.1"], bramskilgour.plusminus3[,"vulnerability.1"], bramskilgour.plusminus3[,"fragility.1"], summary.plusminus3[, "Dem.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"])#
	colnames(dem.BK) <- c("winningness", "vulnerability", "fragility", "EC.Outcome.DEM")#
	rownames(dem.BK) <- uniqueyr#
rep.cor <- cor(rep.BK, use="pairwise.complete.obs")#
dem.cor <- cor(dem.BK, use="pairwise.complete.obs")#
		cat(paste("\n", "********** Table 1a", "**********", "\n")) #
#
			stargazer(dem.cor, rep.cor, #
				type="text", #
				title=c("Democratic Correlations", "Republican Correlations"), #
				out="Tables/table1a.txt")#
	drop <- c(0,1)#
dem.BK.restricted <- dem.BK[!dem.BK[,"winningness"] %in% drop,]#
rep.BK.restricted <- rep.BK[!rep.BK[,"winningness"] %in% drop,]#
dem.cor.restricted <- cor(dem.BK.restricted, use="pairwise.complete.obs")#
rep.cor.restricted <- cor(rep.BK.restricted, use="pairwise.complete.obs")#
		cat(paste("\n", "********** Table 1b", "**********", "\n")) #
#
			stargazer(dem.cor.restricted, rep.cor.restricted, #
				type="text", #
				title=c("Democratic Correlations [Restricted Model]", "Republican Correlations [Restricted Model]"), #
				out="Tables/table1b.txt")#
################### - Table 2:  #
table2 <- cbind(pre.post.means[,1],round(pre.post.means[,-1]*100, digits=1))#
#
		cat(paste("\n", "********** Table 2", "**********", "\n")) #
			stargazer(table2, #
				type="text", #
				style="AJPS",  #
				summary=FALSE, #
				out="/Users/jcervas/Dropbox/Non Competitive Electors/Tables/table2.txt", #
				title="Average Victory Margins in Battleground States as Defined by Shaw and Althaus",  #
				digits=1, #
				rownames=F)#
#
################### - Table 3: Correlations among the Winningness, Vulnerability, and Fragility variables for the Republicans and Republican EC seat share: 1868-2016	 #
table3 <- data.frame(cbind(summary.plusminus3[,"Safe.Republican.ECvotes"], summary.plusminus3[,"Safe.Democratic.ECvotes"], summary.plusminus3[,"Rep.Total.ECwins"], summary.plusminus3[,"Dem.Total.ECwins"], round(summary.plusminus3[,"Rep.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), round(summary.plusminus3[,"Dem.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"], round((summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], digits=3) ))#
header.table3 <- c("Democratic EC Seats", "Republican EC Seats", "Rep EC Wins", "Dem EC Wins", "Republican %", "Democratic %", "Difference", "Difference %")#
colnames(table3) <- header.table3#
rownames(table3) <- uniqueyr#
#
		cat(paste("\n", "********** Table 3", "**********", "\n")) #
			stargazer(table3, type="text", style="AJPS", summary=FALSE, out="Tables/table3.txt", title="Electoral College Data 1868-2016")	 #
#############################################################################################################
#################### - Appendix A: DATA AND ANALYSES REFERRED TO IN TEXT - ##################################
#############################################################################################################
#
#################### - Table Appendix A1: Electoral College Data 1868-2016#
tableA1 <- bramskilgour.plusminus3[,c("winningness", "vulnerability", "fragility", "winningness.1", "vulnerability.1", "fragility.1")]#
rownames(tableA1) <- uniqueyr#
tableA1$actual <- summary.plusminus3[,"Rep.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"]#
#
		cat(paste("\n", "********** Table Appendix A1", "**********", "\n")) #
			stargazer(tableA1, #
			type="text", #
			style="AJPS",  #
			summary=FALSE, #
			out="Tables/tableA1.txt", #
			title="Winningness, Vulnerability, and Fragility 1868-2016",  #
			digits=3)#
#################### - Table Appendix A2: Regressions with Non-Competitive Advantage and with Winningness to predict final Republican EC vote share		#
rep.BK <- data.frame(rep.BK, noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"])#
dem.BK <- data.frame(dem.BK, noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"])#
rep.BK.restricted <- rep.BK[!rep.BK[,"winningness"] %in% drop,]#
dem.BK.restricted <- dem.BK[!dem.BK[,"winningness"] %in% drop,]#
#
NCregressions <-  data.frame(noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], RepECOutcome = summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"], competitive= summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], winningness= bramskilgour.plusminus3[,"winningness"])#
#
summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions))#
#summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage + competitive, data = NCregressions))#
summary(w_reg <- lm(RepECOutcome ~ winningness, data = NCregressions))#
#
summary(w_reg_restricted <- lm(EC.Outcome.REP ~ winningness, data = rep.BK.restricted))#
#
		cat(paste("\n", "********** Appendix Table A2", "**********", "\n")) #
			stargazer(nca_reg, w_reg, w_reg_restricted, #
			type="text", #
			omit.stat=c("rsq", "ser"), #
			style="AJPS", #
			title="Regressions with Non-Competitive Advantage vs Winningness to Predict Final Republican EC seat share", #
			notes="Note: All Regressions calculated using plus or minus 3% as the definition of competitive state.", #
			out="Tables/table3.txt")#
#############################################################################################################
######### - Appendix B: How analyses would change if we changed the definition of noncompetitive State - ####
#############################################################################################################
################### - Appendix B1#
## .1 = +-3.   .2 = +-5#
	BKreplication <- data.frame(#
				Competitive_States_3 = paste0(short.summary[, "CompetitiveStates.1"], " (", short.summary[, "CompetitiveECvotes.1"], ")" ),#
				Competitive_States_5 = paste0(short.summary[, "CompetitiveStates.2"], " (", short.summary[, "CompetitiveECvotes.2"], ")" ),#
				Winningness_3 = round(short.summary[, "R.Winningness.1"]/short.summary[, "D.Winningness.1"], digits=2),#
				Winningness_5 = round(short.summary[, "R.Winningness.2"]/short.summary[, "D.Winningness.2"], digits=2),#
				Vulnerability_3 = round(short.summary[, "R.Vulnerability.1"]/short.summary[, "D.Vulnerability.1"], digits=3),#
				Vulnerability_5 = round(short.summary[, "R.Vulnerability.2"]/short.summary[, "D.Vulnerability.2"], digits=3),#
				Fragility_3 = round(short.summary[, "R.Fragility.1"]/short.summary[, "D.Fragility.1"], digits=3),#
				Fragility_5 = round(short.summary[, "R.Fragility.2"]/short.summary[, "D.Fragility.2"], digits=3))#
rownames(BKreplication) <- seq(2000,2016,4)#
		cat(paste("\n", "********** Table Appendix B1", "**********", "\n")) #
			stargazer(BKreplication, #
				type="text", out="Tables/tableB1.txt", #
				summary=FALSE, #
				title=" Comparisons of results for the Winningness, Vulnerability, and Fragility variables for the Republicans for a +/- 3% and a +/- 5% definition of competitive state: 2000-2016", #
				digits=2, #
				notes="All ratios are REP over DEM")#
	summary(regressBrams1R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"], na.action=na.exclude))#
	summary(regressBrams2R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"] + rep.BK.restricted[,"vulnerability"], na.action=na.exclude))#
	summary(regressBrams3R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"] + rep.BK.restricted[,"vulnerability"] + rep.BK.restricted[,"fragility"], na.action=na.exclude))#
#
	summary(regressBrams2D.restricted <-  lm( dem.BK.restricted[,"EC.Outcome.DEM"] ~ dem.BK.restricted[,"winningness"] + dem.BK.restricted[,"vulnerability"], na.action=na.exclude))#
	summary(regressBrams3D.restricted <-  lm( dem.BK.restricted[,"EC.Outcome.DEM"] ~ dem.BK.restricted[,"winningness"] + dem.BK.restricted[,"vulnerability"] + dem.BK.restricted[,"fragility"], na.action=na.exclude))#
#
stargazer(regressBrams1R.restricted, regressBrams2R.restricted, regressBrams2D.restricted, regressBrams3R.restricted, regressBrams3D.restricted, type="text", title="Appendix: Predicting Electoral Outcomes using Winningness, Vulnerability, and Fragility", notes="Models restricted to Competitive elections, ie Winningness!= 1 or 0") #
#
rep.BK5 <- data.frame(cbind(bramskilgour.plusminus5[,"winningness"], bramskilgour.plusminus5[,"vulnerability"], bramskilgour.plusminus5[,"fragility"], noncompetitiveadvantage = (summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"])/summary.plusminus5[,"Total.ECvotes"], summary.plusminus5[, "Rep.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]))#
	colnames(rep.BK5) <- c("Winningness", "Vulnerability", "Fragility", "NonCompetitiveAdvantage", "EC.Outcome.REP")#
	rownames(rep.BK5) <- uniqueyr#
dem.BK5 <- data.frame(cbind(bramskilgour.plusminus5[,"winningness.1"], bramskilgour.plusminus5[,"vulnerability.1"], bramskilgour.plusminus5[,"fragility.1"], noncompetitiveadvantage = (summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"])/summary.plusminus5[,"Total.ECvotes"], summary.plusminus5[, "Dem.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]))#
	colnames(dem.BK5) <- c("Winningness", "Vulnerability", "Fragility", "NonCompetitiveAdvantage", "EC.Outcome.DEM")#
	rownames(dem.BK5) <- uniqueyr#
rep.cor5 <- cor(rep.BK5, use="pairwise.complete.obs")#
dem.cor5 <- cor(dem.BK5, use="pairwise.complete.obs")#
#
	drop <- c(0,1)#
dem.BK5.restricted <- dem.BK5[!dem.BK5[,"Winningness"] %in% drop,]#
rep.BK5.restricted <- rep.BK5[!rep.BK5[,"Winningness"] %in% drop,]#
#
######## - Appendix Regressions Table B2#
#
summary(reg51 <- lm(EC.Outcome.REP ~ NonCompetitiveAdvantage, data= rep.BK5))#
summary(reg52 <- lm(EC.Outcome.REP ~ Winningness, data= rep.BK5))#
#
summary(reg5restricted1 <- lm(EC.Outcome.REP ~ NonCompetitiveAdvantage, data= rep.BK5.restricted))#
summary(reg5restricted2 <- lm(EC.Outcome.REP ~ Winningness, data= rep.BK5.restricted))#
		cat(paste("\n", "********** Table Appendix B2", "**********", "\n")) #
#
		stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			title="Regression tables using the ± 5% definition of competitive" ,#
			out="Tables/tableB2.tex")#
#############################################################################################################
######### - Appendix C: Using Shaw and Althaus’s classification of battleground as a robustness check - #####
#############################################################################################################
######## - Appendix Table C1#
		cat(paste("\n", "********** Table Appendix C1", "**********", "\n")) #
			 	data.frame(Year=unique(shaw$year), Match=ifelse(match.all==1, "check", ""), SafeRepEC= shaw.all[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.all[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage=shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC=round(shaw.all[,"Rep.Outcome.EC"], digits=2)) #
######## - Appendix Table C2#
		cat(paste("\n", "********** Table Appendix C2", "**********", "\n")) #
#
			stargazer(nca_reg.all, nca_reg.dem, nca_reg.rep, nca_reg.match, #
				type="text", #
				covariate.labels=c("Non Competitive Advantage"), #
				add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
				dep.var.labels.include=FALSE, #
				df=FALSE, #
				omit.stat = c("rsq", "f","ser"), #
				column.separate=c(2,2), #
				column.labels=c("Full Model", "Restricted Model"), #
				out="Tables/tableC2.tex")#
######## - Appendix Table C3#
		cat(paste("\n", "********** Table Appendix C3", "**********", "\n")) #
			cbind.data.frame(#
				Year=unique(shaw$year),#
				Model1=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], digits=2),#
				Model1=ifelse(match.all==1, "check", ""), #
				Model2=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], digits=2),#
				Model2=ifelse(match.dem==1, "check", ""), #
				Model3=round((shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"],digits=2),#
				Model3=ifelse(match.rep==1, "check", ""), #
				Model4=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"],digits=2),#
				Model4=ifelse(match.match==1, "check", ""), #
				EC.Outcome.REP=round(shaw.match[,"Rep.Outcome.EC"], digits=2))#
#############################################################################################################
#################################### - FIGURES - ############################################################
#############################################################################################################
######## - Figure 1: Scatterplots of the Three Brams and Kilgour variables#
		cat(paste("\n", "********** Figure 1", "**********", "\n")) #
#
# pdf("scatterBrams.pdf", width=6, height=3)#
	par(mfrow=c(1,3), #
		oma= c(1,3,0,0), #
		mar=c(3,1,1,1), #
		mgp= c(2,1,0))#
	plot(rep.BK[,"winningness"], rep.BK[,"EC.Outcome.REP"], #
		type="n", #
		yaxt="n", #
		xaxt="n", #
		xlab="")#
		mtext(side=2, #
			line=2.5, #
			"Candidate's Share of EC", #
			cex=0.65)#
		mtext(side=1, #
			line=2, #
			"Winningness", #
			cex=0.65)#
		text(rep.BK[,"winningness"], rep.BK[,"EC.Outcome.REP"], #
			labels=ifelse(rep.BK[,"EC.Outcome.REP"]>.5, rownames(rep.BK), rownames(rep.BK)), #
			col=ifelse(rep.BK[,"EC.Outcome.REP"]>.5, "gray70", "gray30"), #
			cex=0.65)#
abline(h=seq(0,1,.125), lty=3, lwd=.5, col="gray80")#
abline(v=seq(0,1,.25), lty=3, lwd=.5, col="gray80")#
abline(h=0.5, lty=3, lwd=.75, col="gray30")#
abline(v=0.5, lty=3, lwd=.75, col="gray30")#
		axis(side=1, #
			at=c(0, 0.25, 0.5, 0.75, 1), #
			labels=c("0%", "25%", "50%", "75%", "100%"), #
			cex.axis=0.65)#
		axis(side=2, #
			las=2, #
			at=c(0, 0.25, 0.5, 0.75, 1), #
			labels=c("0%", "25%", "50%", "75%", "100%"), #
			cex.axis=0.65)#
#
	plot(rep.BK[,"vulnerability"], rep.BK[,"EC.Outcome.REP"], #
		type="n", #
		yaxt="n", #
		xaxt="n", #
		xlab="")#
			text(rep.BK[,"vulnerability"], rep.BK[,"EC.Outcome.REP"], #
				cex=0.65, #
				labels="R", #
				col="gray70")#
			text(dem.BK[,"vulnerability"], dem.BK[,"EC.Outcome.DEM"], #
				cex=0.65, #
				labels="D", #
				col="gray30")#
			mtext(side=1, #
				line=2, #
				"Vulnerability", #
				cex=0.65)#
abline(h=seq(0,1,.125), lty=3, lwd=.5, col="gray80")#
abline(v=seq(0,1,.25), lty=3, lwd=.5, col="gray80")#
axis(side=1, at=c(0, 0.25, 0.5, 0.75, 1), labels=c("0%", "25%", "50%", "75%", "100%"), cex.axis=0.65)#
abline(h=0.5, lty=3, lwd=.75, col="gray30")#
#
	plot(rep.BK[,"fragility"], rep.BK[,"EC.Outcome.REP"], #
		type="n", #
		yaxt="n", #
		xaxt="n", #
		xlab="") #
			text(rep.BK[,"fragility"], rep.BK[,"EC.Outcome.REP"], #
				cex=0.65, #
				labels="R", #
				col="gray70")#
			text(dem.BK[,"fragility"], dem.BK[,"EC.Outcome.DEM"], #
				cex=0.65, #
				labels="D", #
				col="gray30")#
			mtext(side=1, #
				line=2, #
				"Fragility", #
				cex=0.65)#
abline(h=seq(0,1,.125), lty=3, lwd=.5, col="gray80")#
abline(v=seq(0,15,5), lty=3, lwd=.5, col="gray80")#
axis(side=1, at=c(0, 5,10,15), labels=c(0, 5, 10,15), cex.axis=0.65)#
abline(h=0.5, lty=3, lwd=.75, col="gray30")#
# dev.off()#
######## - Figure 2: Historical Trends in Competitive States#
		cat(paste("\n", "********** Figure 2", "**********", "\n")) #
#
# pdf("scatterHistoricalCompetitiveness.pdf", width=6, height=3)#
par(mar=c(2.5,3,1,.25))#
	plot(summary.plusminus3[,"Year"], summary.plusminus3[,"Safe.Republican.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], #
		type="n", #
		col="gray70", #
		xlab="", #
		ylab="", #
		xaxt="n", #
		yaxt="n", #
		pch=19, #
		cex=0.65, #
		ylim=c(0,1), #
		bty="n")#
		legend(1980,1,#
			legend=c("Safe Republican", "Safe Democratic", "Battleground"), #
			lty=c(2,2,1), #
			lwd=c(3,3,5), #
			col=c("gray60", "gray80", "gray30"), #
			bg="white", #
			box.col="white", #
			cex=0.65)#
abline(h=seq(0,1,.25), lwd=.5, col="gray70", lty=3)#
axis(side=2, las=2, at=c(0,.25,.5,.75,1), labels=c("0%", "25%", "50%", "75%", "100%"), cex.axis=0.5, lwd.ticks=0, lwd=0)#
		text(seq(1868,2016,4), #
			par("usr")[3]-.05, #
			labels = seq(1868,2016,4), #
			srt = 45, #
			pos = 1, #
			xpd = TRUE, #
			cex=0.4)#
	mtext(side=2, #
		line=2.25, #
		"Percent of Electoral College", #
		cex=0.65)#
	text(summary.plusminus3[,"Year"], summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], #
		col="gray50", #
		labels="B", #
		cex=0.45)#
lines(lowess(summary.plusminus3[,"Year"], summary.plusminus3[,"Safe.Republican.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], f=0.5), lwd=3, lty=2, col="gray60")#
lines(lowess(summary.plusminus3[,"Year"], summary.plusminus3[,"Safe.Democratic.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], f=0.5), lwd=3, lty=2, col="gray80")#
lines(lowess(summary.plusminus3[,"Year"], summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], f=0.5), lwd=5, lty=1, col="gray30")#
# dev.off()
###########################################################################################################
###########################################################################################################
###########################################################################################################
###########################################################################################################
### Code to Replicate "Why noncompetitive states are so important for understanding the outcomes of competitive elections: the Electoral College 1868-2016"#
### Accepted - Public Choice#
### Jonathan R. Cervas, University of California Irvine#
### Bernard N. Grofman, University of California Irvine#
### Notes: #
### 1960 and 1976 have too many coalitons to calculate when we go to +-5%, so they are excluded.  #
### All calulations are done by taking the two-party vote, ie, DEM/(DEM+REP) or (REP/DEM+REP).#
### Running funtction to get Winningness and other B+K calculations takes a long time, so they are commented out and just imports data from CSV for further calculations.#
###########################################################################################################
###########################################################################################################
### Remove all objects just to be safe.#
			rm(list=ls(all=TRUE))#
#
setwd("/Users/jcervas/Dropbox/Non Competitive Electors")#
options(scipen=999) # Turn off Scientific Notation#
###########################################################################################################
########### - Libraries - ############
###########################################################################################################
library(stargazer)#
#
###########################################################################################################
######### - Functions - #############
###########################################################################################################
source("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/winningness.R")#
#
###########################################################################################################
######### - Read in Data from internet - #############
###########################################################################################################
		cat(paste("\n", "********** Read in Brams-Kilgour Replication Data [+/-3%]", "**********", "\n")) #
	bramskilgour.plusminus3 <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/bramskilgourplusminus3.csv")#
		cat(paste("\n", "********** Read in Brams-Kilgour Replication Data [+/-5%]", "**********", "\n")) #
	bramskilgour.plusminus5 <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/bramskilgourplusminus5.csv")#
		cat(paste("\n", "********** Read in Presidential Election Data", "**********", "\n")) #
	d <- read.csv("https://raw.githubusercontent.com/jcervas/Non-Competitive-Advantage/master/Presidential_Election_General_Two_Party.csv")#
###########################################################################################################
########## - Election Data Set-up - #############
###########################################################################################################
	 d$tptotal <- d$dem+d$rep#
	 d$pctREP <- d$rep/d$tptotal#
	 d$pctDEM <- d$dem/d$tptotal#
d <- d[d$year>1867,] #
uniqueyr <- unique(d$year)#
#
###########################################################################################################
########## - Non-Competitive Summary - ################
##########################################################################################################	 #
ptm <- proc.time()#
bramskilgour <- numeric(0)#
competitive.low <- 0.47#
competitive.high <- 0.53#
#
summary.plusminus3 <- #
	data.frame(Year=uniqueyr, #
	Total.States=NA, #
	Total.ECvotes=NA, #
	Safe.Republican.States=NA, #
	Safe.Democratic.States=NA, #
	Competitive.States=NA, #
	Safe.Republican.ECvotes=NA, #
	Safe.Democratic.ECvotes=NA, #
	Competitive.ECvotes=NA, #
	Rep.Competitive.Wins=NA, #
	Dem.Competitive.Wins=NA, #
	Rep.Total.ECwins =NA, #
	Dem.Total.ECwins =NA)	 #
#
correlate3independence <- #
	data.frame(Year=uniqueyr, #
	Rep.st.NonCompetitive=NA, #
	Rep.st.Competitive=NA, #
	Rep.EC.NonCompetitive=NA, #
	Rep.EC.Competitive=NA)#
for (yr in uniqueyr){#
	e <- d[d$year==yr,]#
		noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP),]#
		compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP),]#
#
noncompetitive <- #
	data.frame(#
	state=NA, #
	pctREP=NA, #
	ecvotes=NA)#
competitive <- #
	data.frame(state=NA, #
	pctREP=NA, #
	ecvotes=NA)	#
noncompetitive[1:length(noncompet$state),1] <- noncompet$state#
noncompetitive[1:length(noncompet$state),2] <- noncompet$pctREP#
noncompetitive[1:length(noncompet$state),3] <- noncompet$ecvotes#
noncompetitive$s <- 1#
#
competitive[1:length(compet$state),1] <- compet$state#
competitive[1:length(compet$state),2] <- compet$pctREP#
competitive[1:length(compet$state),3] <- compet$ecvotes#
competitive$s <- 1	#
summary.plusminus3[summary.plusminus3$Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
summary.plusminus3[summary.plusminus3$Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
summary.plusminus3[summary.plusminus3$Year==yr,"Competitive.States"] <- sum(competitive$s)#
summary.plusminus3[summary.plusminus3$Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
summary.plusminus3[summary.plusminus3$Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP>.5])#
summary.plusminus3[summary.plusminus3$Year==yr,"Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP<.5])#
#
####### - Run this to generate +-3% numbers	#
# # # winning <- numeric(0) # Place holder for quicker run times#
# # # winning <- winningness(e, "ecvotes", "pctDEM", "pctREP",competitive.high, competitive.low) #
# # # bramskilgour <- rbind(bramskilgour,winning)#
#
####### - Correlating Republican share of victories and Republican share of EC seat in Competitive and Non-Competitive States#
correlate3independence[correlate3independence$Year==yr,"Rep.st.NonCompetitive"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])/sum(noncompetitive$s)#
correlate3independence[correlate3independence$Year==yr,"Rep.st.Competitive"] <- sum(competitive$s[competitive$pctREP>.5])/sum(noncompetitive$s)#
correlate3independence[correlate3independence$Year==yr,"Rep.EC.NonCompetitive"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])/sum(noncompetitive$ecvotes)#
correlate3independence[correlate3independence$Year==yr,"Rep.EC.Competitive"] <- sum(competitive$ecvotes[competitive$pctREP>.5])/sum(competitive$ecvotes)#
}#
# # # write.csv(bramskilgour, "bramskilgourplusminus3.csv", row.names=FALSE)#
proc.time() - ptm#
#
###########################################################################################################
cat(paste("########################################################################################################## \n","***** Correlation tests", "\n"))#
cat(paste("***** Correlation tests", "\n")) ###############################
	 cor.test(correlate3independence[,"Rep.st.NonCompetitive"],correlate3independence[,"Rep.st.Competitive"])#
	 cor.test(correlate3independence[,"Rep.EC.NonCompetitive"],correlate3independence[,"Rep.EC.Competitive"]) #
###########################################################################################################
########## - Sensitivity Analysis +-5% - ##################################################################
##########################################################################################################	 #
	 competitive.low <- 0.45#
	 competitive.high <- 0.55#
	 summary.plusminus5 <- #
	 	data.frame(Year=uniqueyr, #
	 	Total.States=NA, #
	 	Total.ECvotes=NA, #
	 	Safe.Republican.States=NA, #
	 	Safe.Democratic.States=NA, #
	 	Competitive.States=NA, #
	 	Safe.Republican.ECvotes=NA, #
	 	Safe.Democratic.ECvotes=NA, #
	 	Competitive.ECvotes=NA, #
	 	Rep.Competitive.Wins=NA, #
	 	Dem.Competitive.Wins=NA, #
	 	Rep.Total.ECwins =NA, #
	 	Dem.Total.ECwins =NA)#
	summary.plusminus5 <- #
		data.frame(Year=uniqueyr, #
		Total.States=NA, #
		Total.ECvotes=NA, #
		Safe.Republican.States=NA, #
		Safe.Democratic.States=NA, #
		Competitive.States=NA, #
		Safe.Republican.ECvotes=NA, #
		Safe.Democratic.ECvotes=NA, #
		Competitive.ECvotes=NA, #
		Rep.Competitive.Wins=NA, #
		Dem.Competitive.Wins=NA, #
		Rep.Total.ECwins =NA, #
		Dem.Total.ECwins =NA)	#
 uniqueyr <- seq(1868,2016, 4)#
for (yr in uniqueyr) {#
	e <- d[d$year == yr, ]#
#
	noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP), ]#
	compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), ]#
#
	noncompetitive2 <- data.frame(state = noncompet$state, pctREP = NA, ecvotes = NA, s = 1)#
	competitive2 <- data.frame(state = compet$state, pctREP = NA, ecvotes = NA, s = 1)#
#
	noncompetitive2[1:length(noncompet$state), 1] <- noncompet$state#
	noncompetitive2[1:length(noncompet$state), 2] <- noncompet$pctREP#
	noncompetitive2[1:length(noncompet$state), 3] <- noncompet$ecvotes#
#
	competitive2[1:length(compet$state), 1] <- compet$state#
	competitive2[1:length(compet$state), 2] <- compet$pctREP#
	competitive2[1:length(compet$state), 3] <- compet$ecvotes#
#
	summary.plusminus5[summary.plusminus5$Year == yr, "Total.States"] <- sum(competitive2$s) + sum(noncompetitive2$s)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Total.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes) + sum(noncompetitive2$s * #
		noncompetitive2$ecvotes)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Competitive.States"] <- sum(competitive2$s)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Competitive.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes)#
	summary.plusminus5[summary.plusminus5$Year == yr, "Dem.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Rep.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP > 0.5])#
#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Republican.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Democratic.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Republican.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Safe.Democratic.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP < 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP > 0.5])#
	summary.plusminus5[summary.plusminus5$Year == yr, "Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP < 0.5])#
	####### - Run this to generate +-5% numbers	#
	# # # winning10 <- numeric(0) # Place holder for quicker run times#
# # # winning10 <- winningness(e, "ecvotes", "pctDEM", "pctREP", competitive.high, competitive.low) #
# # # bramskilgour.plusminus5 <- rbind(bramskilgour.plusminus5,winning10)#
} #
# # # write.csv(bramskilgour.plusminus5, "bramskilgour.plusminus5.csv")#
#
###########################################################################################################
########## - Sensitivity Analysis +/- 1.5% - #####################################################################
##########################################################################################################	 #
	 competitive.low <- 0.485#
	 competitive.high <- 0.515#
	 bramskilgour.plusminus1.5 <- numeric(0)#
	 summary.plusminus1.5 <- #
	 	data.frame(Year = uniqueyr, #
	 	Total.States = NA, #
	 	Total.ECvotes = NA, #
	 	Safe.Republican.States = NA, #
	 	Safe.Democratic.States = NA, #
	 	Competitive.States = NA, #
	 	Safe.Republican.ECvotes = NA, #
	 	Safe.Democratic.ECvotes = NA, #
	 	Competitive.ECvotes = NA, #
	 	Rep.Competitive.Wins = NA, #
	 	Dem.Competitive.Wins = NA, #
	 	Rep.Total.ECwins = NA, #
	 	Dem.Total.ECwins = NA)#
	 summary.plusminus1.5 <- #
	 	data.frame(Year = uniqueyr, #
	 	Total.States = NA, #
	 	Total.ECvotes = NA, #
	 	Safe.Republican.States = NA, #
	 	Safe.Democratic.States = NA, #
	 	Competitive.States = NA, #
	 	Safe.Republican.ECvotes = NA, #
	 	Safe.Democratic.ECvotes = NA, #
	 	Competitive.ECvotes = NA, #
	 	Rep.Competitive.Wins = NA, #
	 	Dem.Competitive.Wins = NA, #
	 	Rep.Total.ECwins = NA, #
	 	Dem.Total.ECwins = NA)	#
 uniqueyr <- seq(1868, 2016, 4)#
 for (yr in uniqueyr) {#
 	e <- d[d$year == yr, ]#
 	is.competitive <- ifelse(e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), is.competitive <- 1, is.competitive <- 0)#
#
 	if (sum(is.competitive) < 1) {#
 		summary.plusminus1.5[summary.plusminus1.5$Year == yr, ] <- 0#
 	}#
 	if (sum(is.competitive) < 1) {#
 		next#
 	}#
 	noncompet <- e[(e$pctREP > competitive.high | e$pctREP < competitive.low) & !is.na(e$pctREP), ]#
 	compet <- e[e$pctREP > competitive.low & e$pctREP < competitive.high & !is.na(e$pctREP), ]#
#
 	noncompetitive2 <- #
 		data.frame(state = noncompet$state, #
 		pctREP = NA, #
 		ecvotes = NA, #
 		s = 1)#
 	competitive2 <- #
 		data.frame(state = compet$state, #
 		pctREP = NA, #
 		ecvotes = NA, #
 		s = 1)#
#
 	noncompetitive2[1:length(noncompet$state), 1] <- noncompet$state#
 	noncompetitive2[1:length(noncompet$state), 2] <- noncompet$pctREP#
 	noncompetitive2[1:length(noncompet$state), 3] <- noncompet$ecvotes#
#
 	competitive2[1:length(compet$state), 1] <- compet$state#
 	competitive2[1:length(compet$state), 2] <- compet$pctREP#
 	competitive2[1:length(compet$state), 3] <- compet$ecvotes#
#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Total.States"] <- sum(competitive2$s) + sum(noncompetitive2$s)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Total.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes) + sum(noncompetitive2$s * #
 		noncompetitive2$ecvotes)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Competitive.States"] <- sum(competitive2$s)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Competitive.ECvotes"] <- sum(competitive2$s * competitive2$ecvotes)#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Dem.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Rep.Competitive.Wins"] <- sum(competitive2$ecvotes[competitive2$pctREP > 0.5])#
#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Republican.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Democratic.States"] <- sum(noncompetitive2$s[noncompetitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Republican.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Safe.Democratic.ECvotes"] <- sum(noncompetitive2$ecvotes[noncompetitive2$pctREP < 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Rep.Total.ECwins"] <- sum(e$ecvotes[e$pctREP > 0.5])#
 	summary.plusminus1.5[summary.plusminus1.5$Year == yr, "Dem.Total.ECwins"] <- sum(e$ecvotes[e$pctREP < 0.5])#
#
 	####### - Run this to generate +-5% numbers	#
 	winning1.5 <- numeric(0) # Place holder for quicker run times#
 	winning1.5 <- winningness(e, "ecvotes", "pctDEM", "pctREP", competitive.high, competitive.low)#
 	bramskilgour.plusminus1.5 <- rbind(bramskilgour.plusminus1.5, winning1.5)#
 }#
#
cat(paste("***** Brams-Kilgour Replication Data [+/-1.5%]", "\n")) ###############################
summary.plusminus1.5 <- summary.plusminus1.5[!(summary.plusminus1.5$Year==0),]#
		cat(paste("\n", "###########################################################################################################
", "********** Comparing new data to B-K", "**********", "\n", "##########################################################################################################")) #
####### - Select years to compare to B&K#
	 shortyr <- c(2000, 2004, 2008, 2012, 2016)#
summary.plusminus3.short <- summary.plusminus3[summary.plusminus3$Year %in% shortyr,]#
summary.plusminus5.short <- summary.plusminus5[summary.plusminus5$Year %in% shortyr,]#
bramskilgour.3.short <- bramskilgour.plusminus3[bramskilgour.plusminus3[,"year"] %in% shortyr,]#
bramskilgour.5.short <- bramskilgour.plusminus5[bramskilgour.plusminus5[,"year"] %in% shortyr,]#
#
short.summary <- data.frame(#
	CompetitiveStates = #
		cbind(summary.plusminus3.short[,"Competitive.States"], #
		summary.plusminus5.short[,"Competitive.States"]),#
	CompetitiveECvotes = #
		cbind(summary.plusminus3.short[,"Competitive.ECvotes"], #
		summary.plusminus5.short[,"Competitive.ECvotes"]),#
	DiffNonCompetitiveEC = #
		cbind(summary.plusminus3.short[,"Safe.Republican.ECvotes"] - summary.plusminus3.short[,"Safe.Democratic.ECvotes"], #
		summary.plusminus5.short[,"Safe.Republican.ECvotes"] - summary.plusminus5.short[,"Safe.Democratic.ECvotes"]),#
	R.Winningness = #
		cbind(bramskilgour.3.short[,"winningness"], #
		bramskilgour.5.short[,"winningness"]),#
	D.Winningness = #
		cbind(bramskilgour.3.short[,"winningness.1"], #
		bramskilgour.5.short[,"winningness.1"]),#
	R.Vulnerability = #
		cbind(bramskilgour.3.short[,"vulnerability"], #
		bramskilgour.5.short[,"vulnerability"]),#
	R.Fragility = #
		cbind(bramskilgour.3.short[,"fragility"], #
		bramskilgour.5.short[,"fragility"]),#
	D.Vulnerability = #
		cbind(bramskilgour.3.short[,"vulnerability.1"], #
		bramskilgour.5.short[,"vulnerability.1"]),#
	D.Fragility = #
		cbind(bramskilgour.3.short[,"fragility.1"], #
		bramskilgour.5.short[,"fragility.1"]),#
	ECOutcomeREP = summary.plusminus3.short[, "Rep.Total.ECwins"]/ summary.plusminus3.short[, "Total.ECvotes"]#
)#
#
	 bramskilgour.plusminus3$rep.ec.outcome <- summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"]#
		 ### Matching Winningness with Actual EC Outcomes#
		 noncompetediff <- summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"]#
		noncompete_winning <- #
			cbind(ifelse(noncompetediff > 0,1,0), #
			ifelse(bramskilgour.plusminus3[,"rep.ec.outcome"]>0.5, 1, 0))#
	 	match <- ifelse(noncompete_winning[,1]== noncompete_winning[,2], 1, 0)#
	 	data.frame(Year=uniqueyr, Match=match, SafeRepEC=summary.plusminus3[,"Safe.Republican.ECvotes"], SafeDemEC=summary.plusminus3[,"Safe.Democratic.ECvotes"])#
	 winningness_winning <- cbind(ifelse(bramskilgour.plusminus3[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus3[,"rep.ec.outcome"]>0.5,1,0))#
	 match2 <- ifelse(winningness_winning[,1]== winningness_winning[,2], 1, 0)#
cbind(uniqueyr, match2)#
		 ### Matching Winningness with Actual EC Outcomes: +-5%#
	 bramskilgour.plusminus5$rep.ec.outcome <- summary.plusminus5[, "Rep.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]#
		 noncompetediff5 <- summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"]#
		noncompete_winning5 <- cbind(ifelse(noncompetediff5 > 0,1,0), ifelse(bramskilgour.plusminus5[,"rep.ec.outcome"]>0.5,1,0))#
	 	match5 <- ifelse(noncompete_winning5[,1]== noncompete_winning5[,2], 1, 0)#
	 	cbind(uniqueyr, match5, summary.plusminus5[,"Safe.Republican.ECvotes"], summary.plusminus5[,"Safe.Democratic.ECvotes"])#
	 winningness_winning5 <- cbind(ifelse(bramskilgour.plusminus5[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus5[,"rep.ec.outcome"]>0.5,1,0))#
	 match5 <- ifelse(winningness_winning5[,1]== winningness_winning5[,2], 1, 0)#
cbind(uniqueyr, match5)#
#
		 ### Matching Winningness with Actual EC Outcomes: +- 1.5%#
	 bramskilgour.plusminus1.5$rep.ec.outcome <- summary.plusminus1.5[, "Rep.Total.ECwins"]/ summary.plusminus1.5[, "Total.ECvotes"]#
		 noncompetediff1.5 <- summary.plusminus1.5[,"Safe.Republican.ECvotes"] - summary.plusminus1.5[,"Safe.Democratic.ECvotes"]#
		noncompete_winning1.5 <- cbind(ifelse(noncompetediff1.5 > 0,1,0), ifelse(bramskilgour.plusminus1.5[,"rep.ec.outcome"]>0.5,1,0))#
	 	match1.5 <- ifelse(noncompete_winning1.5[,1]== noncompete_winning1.5[,2], 1, 0)#
	 	cbind(unique(summary.plusminus1.5$Year), match1.5, summary.plusminus1.5[,"Safe.Republican.ECvotes"], summary.plusminus1.5[,"Safe.Democratic.ECvotes"])#
	 winningness_winning1.5 <- cbind(ifelse(bramskilgour.plusminus1.5[,"winningness"]>0.5,1,0), ifelse(bramskilgour.plusminus1.5[,"rep.ec.outcome"]>0.5,1,0))#
	 match1.5 <- ifelse(winningness_winning1.5[,1]== winningness_winning1.5[,2], 1, 0)#
	 yrs <- match(bramskilgour.plusminus1.5$year, uniqueyr)#
cbind(uniqueyr[yrs], match1.5)#
#
###########################################################################################################
######################## - Shaw and Althaus Replication - ########################################################
##########################################################################################################	#
shaw <- read.csv("campaign_classifications.csv")#
#
shaw.all <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
#
shaw$code <- ifelse(shaw$classification=="Base Democratic", -1, ifelse(shaw$classification=="Battleground", 0, ifelse(shaw$classification=="Base Republican", 1, NA)))#
party.class <- numeric()#
for (yr in unique(shaw$year)) {#
	shaw.yr <- shaw[shaw$year==yr,]#
	d.yr <- d[d$year==yr,]#
	d.yr <- merge(shaw.yr, d.yr, by=c("state", "year"))#
	party.class <- rbind(party.class , cbind(yr, sum(d.yr$code[d.yr$party=="dem"] * d.yr$ecvotes[d.yr$party=="dem"], na.rm=TRUE), sum(d.yr$code[d.yr$party=="rep"] * d.yr$ecvotes[d.yr$party=="rep"], na.rm=TRUE)     ))#
	colnames(party.class) <- c("year", "dem", "rep")#
}#
### Candidate Perceptive of Election#
party.class#
### Battlegrounds From Either Party#
for (yr in unique(shaw$year)) {#
		shaw.yr.dem <- shaw[shaw$year==yr & shaw$party=="dem" & shaw$code==0,]#
		shaw.yr.rep <- shaw[shaw$year==yr & shaw$party=="rep" & shaw$code==0,]#
	battleground.yr <- unique(c(as.character(shaw.yr.dem$state), as.character(shaw.yr.rep$state)))#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
competitive <- d.yr[d.yr$state %in% battleground.yr,]#
noncompetitive <- d.yr[!(d.yr$state %in% battleground.yr),]#
##### - Non-Competitive Advantage#
shaw.all[shaw.all$Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
shaw.all[shaw.all$Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
shaw.all[shaw.all$Year==yr,"Competitive.States"] <- sum(competitive$s)#
shaw.all[shaw.all$Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
shaw.all[shaw.all$Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])#
shaw.all[shaw.all$Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5])#
shaw.all[shaw.all$Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])/sum(d.yr$ecvotes)#
### - Average victory in Battlegrounds#
# pre.post.means[pre.post.means $Year==yr,"BaseDemocratic"] <-  mean(noncompetitive$pctREP[noncompetitive$pctREP<=0.5] - noncompetitive$pctDEM[noncompetitive$pctREP<=0.5])#
# pre.post.means[pre.post.means $Year==yr,"Battleground"] <-  mean(abs(d.yr$pctREP[d.yr$state %in% battleground.yr] - d.yr$pctDEM[d.yr$state %in% battleground.yr]))#
# pre.post.means[pre.post.means $Year==yr,"BaseRepublican"] <-  mean(noncompetitive$pctREP[noncompetitive$pctREP>=0.5] - noncompetitive$pctDEM[noncompetitive$pctREP>=0.5])#
#
	}#
#
NCregressions.all <-  data.frame(noncompetitiveadvantage = (shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"])/shaw.all[,"Total.ECvotes"], RepECOutcome = shaw.all[, "Rep.Total.ECwins"]/ shaw.all[, "Total.ECvotes"], competitive= shaw.all[,"Competitive.ECvotes"]/shaw.all[,"Total.ECvotes"])#
#
summary(nca_reg.all <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.all))#
#
### Matching Winningness with Actual EC Outcomes#
		 noncompetediff.all <- shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.all <- cbind(ifelse(noncompetediff.all > 0,1,0), ifelse(shaw.all[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.all <- ifelse(noncompete_winning.all[,1]== noncompete_winning.all[,2], 1, 0)#
##########################################################################################################
####################### - Other specifications - ################################################################
##########################################################################################################
pre.post.means <- data.frame(Year=unique(shaw$year), BaseDemocraticD=NA, BaseDemocraticR=NA, BattlegroundD=NA, BattlegroundR=NA, BaseRepublicanD=NA, BaseRepublicanR=NA)#
## - Using only Democratic Strategies#
shaw.dem <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
shaw.d <- shaw[shaw$year==yr & shaw$party=="dem" , c("state", "code")]#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
		d.yr <- merge(d.yr, shaw.d, by="state")#
competitive <- d.yr[d.yr$code==0,]#
noncompetitive.d <- d.yr[d.yr$code==-1,]#
noncompetitive.r <- d.yr[d.yr$code==1,]#
shaw.dem[shaw.dem $Year==yr,"Total.States"] <- sum(competitive$s,na.rm=T) + sum(noncompetitive.d$s,na.rm=T) + sum(noncompetitive.r$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T) + sum(noncompetitive.d$s * noncompetitive.d$ecvotes,na.rm=T) + sum(noncompetitive.r$s * noncompetitive.r$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Competitive.States"] <- sum(competitive$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive.r$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive.d$s,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive.r$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive.d$ecvotes,na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5],na.rm=T)#
shaw.dem[shaw.dem $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)/sum(d.yr$ecvotes,na.rm=T)#
#
pre.post.means[pre.post.means $Year==yr,"BaseDemocraticD"] <- mean(abs(noncompetitive.d$pctREP-noncompetitive.d$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BaseRepublicanD"] <- mean(abs(noncompetitive.r$pctREP-noncompetitive.r$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BattlegroundD"] <- mean(abs(competitive$pctREP-competitive$pctDEM), na.rm=TRUE)#
	}#
 noncompetediff.dem <- shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.dem <- cbind(ifelse(noncompetediff.dem > 0,1,0), ifelse(shaw.dem[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.dem <- ifelse(noncompete_winning.dem[,1]== noncompete_winning.dem[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.dem==1, "check", ""), SafeRepEC= shaw.dem[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.dem[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= round(shaw.dem[,"Rep.Outcome.EC"], digits=2))#
#
NCregressions.dem <-  data.frame(noncompetitiveadvantage = (shaw.dem[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], RepECOutcome = shaw.dem[, "Rep.Total.ECwins"]/ shaw.dem[, "Total.ECvotes"], competitive= shaw.dem[,"Competitive.ECvotes"]/shaw.dem[,"Total.ECvotes"])#
summary(nca_reg.dem <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.dem))#
##########################################################################################################
## - Using only Republican Strategies#
shaw.rep <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
shaw.r <- shaw[shaw$year==yr & shaw$party=="rep" , c("state", "code")]#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
		d.yr <- merge(d.yr, shaw.r, by="state")#
competitive <- d.yr[d.yr$code==0,]#
noncompetitive.d <- d.yr[d.yr$code==-1,]#
noncompetitive.r <- d.yr[d.yr$code==1,]#
shaw.rep[shaw.rep $Year==yr,"Total.States"] <- sum(competitive$s,na.rm=T) + sum(noncompetitive.d$s,na.rm=T) + sum(noncompetitive.r$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T) + sum(noncompetitive.d$s * noncompetitive.d$ecvotes,na.rm=T) + sum(noncompetitive.r$s * noncompetitive.r$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Competitive.States"] <- sum(competitive$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive.r$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive.d$s,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive.r$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive.d$ecvotes,na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5],na.rm=T)#
shaw.rep[shaw.rep $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5],na.rm=T)/sum(d.yr$ecvotes,na.rm=T)#
#
pre.post.means[pre.post.means $Year==yr,"BaseDemocraticR"] <- mean(abs(noncompetitive.d$pctREP-noncompetitive.d$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BaseRepublicanR"] <- mean(abs(noncompetitive.r$pctREP-noncompetitive.r$pctDEM), na.rm=TRUE)#
pre.post.means[pre.post.means $Year==yr,"BattlegroundR"] <- mean(abs(competitive$pctREP-competitive$pctDEM), na.rm=TRUE)#
	}#
 noncompetediff.rep <- shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.rep <- cbind(ifelse(noncompetediff.rep > 0,1,0), ifelse(shaw.rep[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.rep <- ifelse(noncompete_winning.rep[,1]== noncompete_winning.rep[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.rep==1, "check", ""), SafeRepEC= shaw.rep[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.rep[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.rep[,"Rep.Outcome.EC"])#
#
NCregressions.rep <-  data.frame(noncompetitiveadvantage = (shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"], RepECOutcome = shaw.rep[, "Rep.Total.ECwins"]/ shaw.rep[, "Total.ECvotes"], competitive= shaw.rep[,"Competitive.ECvotes"]/shaw.rep[,"Total.ECvotes"])#
#
summary(nca_reg.rep <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.rep))#
##########################################################################################################
## - Using only matched Strategies#
shaw.match <- data.frame(Year=unique(shaw$year), Total.States=NA, Total.ECvotes=NA, Safe.Republican.States=NA, Safe.Democratic.States=NA, Competitive.States=NA, Safe.Republican.ECvotes=NA, Safe.Democratic.ECvotes=NA, Competitive.ECvotes=NA, Rep.Competitive.Wins=NA, Dem.Competitive.Wins=NA, Rep.Total.ECwins =NA, Dem.Total.ECwins =NA, Rep.Outcome.EC=NA)	#
for (yr in unique(shaw$year)) {#
		shaw.yr.dem <- shaw[shaw$year==yr & shaw$party=="dem" & shaw$code==0,]#
		shaw.yr.rep <- shaw[shaw$year==yr & shaw$party=="rep" & shaw$code==0,]#
	battleground.match <- as.character(shaw.yr.dem$state[as.character(shaw.yr.dem$state) %in% as.character(shaw.yr.rep$state)])#
		d.yr <- d[d$year==yr,]#
		d.yr$s <- 1#
competitive <- d.yr[d.yr$state %in% battleground.match,]#
noncompetitive <- d.yr[!(d.yr$state %in% battleground.match),]#
shaw.match[shaw.match $Year==yr,"Total.States"] <- sum(competitive$s) + sum(noncompetitive$s)#
shaw.match[shaw.match $Year==yr,"Total.ECvotes"] <- sum(competitive$s * competitive$ecvotes) + sum(noncompetitive$s * noncompetitive$ecvotes)#
shaw.match[shaw.match $Year==yr,"Competitive.States"] <- sum(competitive$s)#
shaw.match[shaw.match $Year==yr,"Competitive.ECvotes"] <- sum(competitive$s * competitive$ecvotes)#
shaw.match[shaw.match $Year==yr,"Dem.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Competitive.Wins"] <- sum(competitive$ecvotes[competitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Republican.States"] <- sum(noncompetitive$s[noncompetitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Democratic.States"] <- sum(noncompetitive$s[noncompetitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Safe.Republican.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Safe.Democratic.ECvotes"] <- sum(noncompetitive$ecvotes[noncompetitive$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])#
shaw.match[shaw.match $Year==yr,"Dem.Total.ECwins"] <- sum(d.yr$ecvotes[d.yr$pctREP<.5])#
shaw.match[shaw.match $Year==yr,"Rep.Outcome.EC"] <- sum(d.yr$ecvotes[d.yr$pctREP>.5])/sum(d.yr$ecvotes)#
	}#
 noncompetediff.match <- shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"]#
		noncompete_winning.match <- cbind(ifelse(noncompetediff.match > 0,1,0), ifelse(shaw.match[,"Rep.Outcome.EC"]>0.5,1,0))#
	 	match.match <- ifelse(noncompete_winning.match[,1]== noncompete_winning.match[,2], 1, 0)#
	 	data.frame(Year=unique(shaw$year), Match=ifelse(match.match==1, "check", ""), SafeRepEC= shaw.match[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.match[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage= shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC= shaw.match[,"Rep.Outcome.EC"])#
#
NCregressions.match <-  data.frame(noncompetitiveadvantage = (shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], RepECOutcome = shaw.match[, "Rep.Total.ECwins"]/ shaw.match[, "Total.ECvotes"], competitive= shaw.match[,"Competitive.ECvotes"]/shaw.match[,"Total.ECvotes"])#
#
summary(nca_reg.match <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions.match))#
#############################################################################################################
################################ - TABLES - #################################################################
#############################################################################################################
################### - Table 1:#
rep.BK <- cbind(bramskilgour.plusminus3[,"winningness"], bramskilgour.plusminus3[,"vulnerability"], bramskilgour.plusminus3[,"fragility"], summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"])#
	colnames(rep.BK) <- c("winningness", "vulnerability", "fragility", "EC.Outcome.REP")#
	rownames(rep.BK) <- uniqueyr#
dem.BK <- cbind(bramskilgour.plusminus3[,"winningness.1"], bramskilgour.plusminus3[,"vulnerability.1"], bramskilgour.plusminus3[,"fragility.1"], summary.plusminus3[, "Dem.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"])#
	colnames(dem.BK) <- c("winningness", "vulnerability", "fragility", "EC.Outcome.DEM")#
	rownames(dem.BK) <- uniqueyr#
rep.cor <- cor(rep.BK, use="pairwise.complete.obs")#
dem.cor <- cor(dem.BK, use="pairwise.complete.obs")#
		cat(paste("\n", "********** Table 1a", "**********", "\n")) #
#
			stargazer(dem.cor, rep.cor, #
				type="text", #
				title=c("Democratic Correlations", "Republican Correlations"), #
				out="Tables/table1a.txt")#
	drop <- c(0,1)#
dem.BK.restricted <- dem.BK[!dem.BK[,"winningness"] %in% drop,]#
rep.BK.restricted <- rep.BK[!rep.BK[,"winningness"] %in% drop,]#
dem.cor.restricted <- cor(dem.BK.restricted, use="pairwise.complete.obs")#
rep.cor.restricted <- cor(rep.BK.restricted, use="pairwise.complete.obs")#
		cat(paste("\n", "********** Table 1b", "**********", "\n")) #
#
			stargazer(dem.cor.restricted, rep.cor.restricted, #
				type="text", #
				title=c("Democratic Correlations [Restricted Model]", "Republican Correlations [Restricted Model]"), #
				out="Tables/table1b.txt")#
################### - Table 2:  #
table2 <- cbind(pre.post.means[,1],round(pre.post.means[,-1]*100, digits=1))#
#
		cat(paste("\n", "********** Table 2", "**********", "\n")) #
			stargazer(table2, #
				type="text", #
				style="AJPS",  #
				summary=FALSE, #
				out="/Users/jcervas/Dropbox/Non Competitive Electors/Tables/table2.txt", #
				title="Average Victory Margins in Battleground States as Defined by Shaw and Althaus",  #
				digits=1, #
				rownames=F)#
#
################### - Table 3: Correlations among the Winningness, Vulnerability, and Fragility variables for the Republicans and Republican EC seat share: 1868-2016	 #
table3 <- data.frame(cbind(summary.plusminus3[,"Safe.Republican.ECvotes"], summary.plusminus3[,"Safe.Democratic.ECvotes"], summary.plusminus3[,"Rep.Total.ECwins"], summary.plusminus3[,"Dem.Total.ECwins"], round(summary.plusminus3[,"Rep.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), round(summary.plusminus3[,"Dem.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"], digits=3), summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"], round((summary.plusminus3[,"Safe.Republican.ECvotes"]-summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], digits=3) ))#
header.table3 <- c("Democratic EC Seats", "Republican EC Seats", "Rep EC Wins", "Dem EC Wins", "Republican %", "Democratic %", "Difference", "Difference %")#
colnames(table3) <- header.table3#
rownames(table3) <- uniqueyr#
#
		cat(paste("\n", "********** Table 3", "**********", "\n")) #
			stargazer(table3, type="text", style="AJPS", summary=FALSE, out="Tables/table3.txt", title="Electoral College Data 1868-2016")	 #
#############################################################################################################
#################### - Appendix A: DATA AND ANALYSES REFERRED TO IN TEXT - ##################################
#############################################################################################################
#
#################### - Table Appendix A1: Electoral College Data 1868-2016#
tableA1 <- bramskilgour.plusminus3[,c("winningness", "vulnerability", "fragility", "winningness.1", "vulnerability.1", "fragility.1")]#
rownames(tableA1) <- uniqueyr#
tableA1$actual <- summary.plusminus3[,"Rep.Total.ECwins"]/summary.plusminus3[,"Total.ECvotes"]#
#
		cat(paste("\n", "********** Table Appendix A1", "**********", "\n")) #
			stargazer(tableA1, #
			type="text", #
			style="AJPS",  #
			summary=FALSE, #
			out="Tables/tableA1.txt", #
			title="Winningness, Vulnerability, and Fragility 1868-2016",  #
			digits=3)#
#################### - Table Appendix A2: Regressions with Non-Competitive Advantage and with Winningness to predict final Republican EC vote share		#
rep.BK <- data.frame(rep.BK, noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"])#
dem.BK <- data.frame(dem.BK, noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"])#
rep.BK.restricted <- rep.BK[!rep.BK[,"winningness"] %in% drop,]#
dem.BK.restricted <- dem.BK[!dem.BK[,"winningness"] %in% drop,]#
#
NCregressions <-  data.frame(noncompetitiveadvantage = (summary.plusminus3[,"Safe.Republican.ECvotes"] - summary.plusminus3[,"Safe.Democratic.ECvotes"])/summary.plusminus3[,"Total.ECvotes"], RepECOutcome = summary.plusminus3[, "Rep.Total.ECwins"]/ summary.plusminus3[, "Total.ECvotes"], competitive= summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], winningness= bramskilgour.plusminus3[,"winningness"])#
#
summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage, data = NCregressions))#
#summary(nca_reg <- lm(RepECOutcome ~ noncompetitiveadvantage + competitive, data = NCregressions))#
summary(w_reg <- lm(RepECOutcome ~ winningness, data = NCregressions))#
#
summary(w_reg_restricted <- lm(EC.Outcome.REP ~ winningness, data = rep.BK.restricted))#
#
		cat(paste("\n", "********** Appendix Table A2", "**********", "\n")) #
			stargazer(nca_reg, w_reg, w_reg_restricted, #
			type="text", #
			omit.stat=c("rsq", "ser"), #
			style="AJPS", #
			title="Regressions with Non-Competitive Advantage vs Winningness to Predict Final Republican EC seat share", #
			notes="Note: All Regressions calculated using plus or minus 3% as the definition of competitive state.", #
			out="Tables/table3.txt")#
#############################################################################################################
######### - Appendix B: How analyses would change if we changed the definition of noncompetitive State - ####
#############################################################################################################
################### - Appendix B1#
## .1 = +-3.   .2 = +-5#
	BKreplication <- data.frame(#
				Competitive_States_3 = paste0(short.summary[, "CompetitiveStates.1"], " (", short.summary[, "CompetitiveECvotes.1"], ")" ),#
				Competitive_States_5 = paste0(short.summary[, "CompetitiveStates.2"], " (", short.summary[, "CompetitiveECvotes.2"], ")" ),#
				Winningness_3 = round(short.summary[, "R.Winningness.1"]/short.summary[, "D.Winningness.1"], digits=2),#
				Winningness_5 = round(short.summary[, "R.Winningness.2"]/short.summary[, "D.Winningness.2"], digits=2),#
				Vulnerability_3 = round(short.summary[, "R.Vulnerability.1"]/short.summary[, "D.Vulnerability.1"], digits=3),#
				Vulnerability_5 = round(short.summary[, "R.Vulnerability.2"]/short.summary[, "D.Vulnerability.2"], digits=3),#
				Fragility_3 = round(short.summary[, "R.Fragility.1"]/short.summary[, "D.Fragility.1"], digits=3),#
				Fragility_5 = round(short.summary[, "R.Fragility.2"]/short.summary[, "D.Fragility.2"], digits=3))#
rownames(BKreplication) <- seq(2000,2016,4)#
		cat(paste("\n", "********** Table Appendix B1", "**********", "\n")) #
			stargazer(BKreplication, #
				type="text", out="Tables/tableB1.txt", #
				summary=FALSE, #
				title=" Comparisons of results for the Winningness, Vulnerability, and Fragility variables for the Republicans for a +/- 3% and a +/- 5% definition of competitive state: 2000-2016", #
				digits=2, #
				notes="All ratios are REP over DEM")#
	summary(regressBrams1R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"], na.action=na.exclude))#
	summary(regressBrams2R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"] + rep.BK.restricted[,"vulnerability"], na.action=na.exclude))#
	summary(regressBrams3R.restricted <-  lm( rep.BK.restricted[,"EC.Outcome.REP"] ~ rep.BK.restricted[,"winningness"] + rep.BK.restricted[,"vulnerability"] + rep.BK.restricted[,"fragility"], na.action=na.exclude))#
#
	summary(regressBrams2D.restricted <-  lm( dem.BK.restricted[,"EC.Outcome.DEM"] ~ dem.BK.restricted[,"winningness"] + dem.BK.restricted[,"vulnerability"], na.action=na.exclude))#
	summary(regressBrams3D.restricted <-  lm( dem.BK.restricted[,"EC.Outcome.DEM"] ~ dem.BK.restricted[,"winningness"] + dem.BK.restricted[,"vulnerability"] + dem.BK.restricted[,"fragility"], na.action=na.exclude))#
#
stargazer(regressBrams1R.restricted, regressBrams2R.restricted, regressBrams2D.restricted, regressBrams3R.restricted, regressBrams3D.restricted, type="text", title="Appendix: Predicting Electoral Outcomes using Winningness, Vulnerability, and Fragility", notes="Models restricted to Competitive elections, ie Winningness!= 1 or 0") #
#
rep.BK5 <- data.frame(cbind(bramskilgour.plusminus5[,"winningness"], bramskilgour.plusminus5[,"vulnerability"], bramskilgour.plusminus5[,"fragility"], noncompetitiveadvantage = (summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"])/summary.plusminus5[,"Total.ECvotes"], summary.plusminus5[, "Rep.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]))#
	colnames(rep.BK5) <- c("Winningness", "Vulnerability", "Fragility", "NonCompetitiveAdvantage", "EC.Outcome.REP")#
	rownames(rep.BK5) <- uniqueyr#
dem.BK5 <- data.frame(cbind(bramskilgour.plusminus5[,"winningness.1"], bramskilgour.plusminus5[,"vulnerability.1"], bramskilgour.plusminus5[,"fragility.1"], noncompetitiveadvantage = (summary.plusminus5[,"Safe.Republican.ECvotes"] - summary.plusminus5[,"Safe.Democratic.ECvotes"])/summary.plusminus5[,"Total.ECvotes"], summary.plusminus5[, "Dem.Total.ECwins"]/ summary.plusminus5[, "Total.ECvotes"]))#
	colnames(dem.BK5) <- c("Winningness", "Vulnerability", "Fragility", "NonCompetitiveAdvantage", "EC.Outcome.DEM")#
	rownames(dem.BK5) <- uniqueyr#
rep.cor5 <- cor(rep.BK5, use="pairwise.complete.obs")#
dem.cor5 <- cor(dem.BK5, use="pairwise.complete.obs")#
#
	drop <- c(0,1)#
dem.BK5.restricted <- dem.BK5[!dem.BK5[,"Winningness"] %in% drop,]#
rep.BK5.restricted <- rep.BK5[!rep.BK5[,"Winningness"] %in% drop,]#
#
######## - Appendix Regressions Table B2#
#
summary(reg51 <- lm(EC.Outcome.REP ~ NonCompetitiveAdvantage, data= rep.BK5))#
summary(reg52 <- lm(EC.Outcome.REP ~ Winningness, data= rep.BK5))#
#
summary(reg5restricted1 <- lm(EC.Outcome.REP ~ NonCompetitiveAdvantage, data= rep.BK5.restricted))#
summary(reg5restricted2 <- lm(EC.Outcome.REP ~ Winningness, data= rep.BK5.restricted))#
		cat(paste("\n", "********** Table Appendix B2", "**********", "\n")) #
#
		stargazer(reg51, reg52, reg5restricted1, reg5restricted2, #
			type="text", #
			covariate.labels=c("Non Competitive Advantage", "Winningness"), #
			add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
			dep.var.labels.include=FALSE, #
			df=FALSE, #
			omit.stat = c("rsq", "f","ser"), #
			column.separate=c(2,2), #
			column.labels=c("Full Model", "Restricted Model"),#
			title="Regression tables using the ± 5% definition of competitive" ,#
			out="Tables/tableB2.tex")#
#############################################################################################################
######### - Appendix C: Using Shaw and Althaus’s classification of battleground as a robustness check - #####
#############################################################################################################
######## - Appendix Table C1#
		cat(paste("\n", "********** Table Appendix C1", "**********", "\n")) #
			 	data.frame(Year=unique(shaw$year), Match=ifelse(match.all==1, "check", ""), SafeRepEC= shaw.all[,"Safe.Republican.ECvotes"], SafeDemEC= shaw.all[,"Safe.Democratic.ECvotes"], NonCompetitiveAdvantage=shaw.all[,"Safe.Republican.ECvotes"] - shaw.all[,"Safe.Democratic.ECvotes"], Rep.Outcome.EC=round(shaw.all[,"Rep.Outcome.EC"], digits=2)) #
######## - Appendix Table C2#
		cat(paste("\n", "********** Table Appendix C2", "**********", "\n")) #
#
			stargazer(nca_reg.all, nca_reg.dem, nca_reg.rep, nca_reg.match, #
				type="text", #
				covariate.labels=c("Non Competitive Advantage"), #
				add.lines=list(c("Restricted Model","NO","NO","YES","YES")), #
				dep.var.labels.include=FALSE, #
				df=FALSE, #
				omit.stat = c("rsq", "f","ser"), #
				column.separate=c(2,2), #
				column.labels=c("Full Model", "Restricted Model"), #
				out="Tables/tableC2.tex")#
######## - Appendix Table C3#
		cat(paste("\n", "********** Table Appendix C3", "**********", "\n")) #
			cbind.data.frame(#
				Year=unique(shaw$year),#
				Model1=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"], digits=2),#
				Model1=ifelse(match.all==1, "check", ""), #
				Model2=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.dem[,"Safe.Democratic.ECvotes"])/shaw.dem[,"Total.ECvotes"], digits=2),#
				Model2=ifelse(match.dem==1, "check", ""), #
				Model3=round((shaw.rep[,"Safe.Republican.ECvotes"] - shaw.rep[,"Safe.Democratic.ECvotes"])/shaw.rep[,"Total.ECvotes"],digits=2),#
				Model3=ifelse(match.rep==1, "check", ""), #
				Model4=round((shaw.match[,"Safe.Republican.ECvotes"] - shaw.match[,"Safe.Democratic.ECvotes"])/shaw.match[,"Total.ECvotes"],digits=2),#
				Model4=ifelse(match.match==1, "check", ""), #
				EC.Outcome.REP=round(shaw.match[,"Rep.Outcome.EC"], digits=2))#
#############################################################################################################
#################################### - FIGURES - ############################################################
#############################################################################################################
######## - Figure 1: Scatterplots of the Three Brams and Kilgour variables#
		cat(paste("\n", "********** Figure 1", "**********", "\n")) #
#
# pdf("scatterBrams.pdf", width=6, height=3)#
	par(mfrow=c(1,3), #
		oma= c(1,3,0,0), #
		mar=c(3,1,1,1), #
		mgp= c(2,1,0))#
	plot(rep.BK[,"winningness"], rep.BK[,"EC.Outcome.REP"], #
		type="n", #
		yaxt="n", #
		xaxt="n", #
		xlab="")#
		mtext(side=2, #
			line=2.5, #
			"Candidate's Share of EC", #
			cex=0.65)#
		mtext(side=1, #
			line=2, #
			"Winningness", #
			cex=0.65)#
		text(rep.BK[,"winningness"], rep.BK[,"EC.Outcome.REP"], #
			labels=ifelse(rep.BK[,"EC.Outcome.REP"]>.5, rownames(rep.BK), rownames(rep.BK)), #
			col=ifelse(rep.BK[,"EC.Outcome.REP"]>.5, "gray70", "gray30"), #
			cex=0.65)#
abline(h=seq(0,1,.125), lty=3, lwd=.5, col="gray80")#
abline(v=seq(0,1,.25), lty=3, lwd=.5, col="gray80")#
abline(h=0.5, lty=3, lwd=.75, col="gray30")#
abline(v=0.5, lty=3, lwd=.75, col="gray30")#
		axis(side=1, #
			at=c(0, 0.25, 0.5, 0.75, 1), #
			labels=c("0%", "25%", "50%", "75%", "100%"), #
			cex.axis=0.65)#
		axis(side=2, #
			las=2, #
			at=c(0, 0.25, 0.5, 0.75, 1), #
			labels=c("0%", "25%", "50%", "75%", "100%"), #
			cex.axis=0.65)#
#
	plot(rep.BK[,"vulnerability"], rep.BK[,"EC.Outcome.REP"], #
		type="n", #
		yaxt="n", #
		xaxt="n", #
		xlab="")#
			text(rep.BK[,"vulnerability"], rep.BK[,"EC.Outcome.REP"], #
				cex=0.65, #
				labels="R", #
				col="gray70")#
			text(dem.BK[,"vulnerability"], dem.BK[,"EC.Outcome.DEM"], #
				cex=0.65, #
				labels="D", #
				col="gray30")#
			mtext(side=1, #
				line=2, #
				"Vulnerability", #
				cex=0.65)#
abline(h=seq(0,1,.125), lty=3, lwd=.5, col="gray80")#
abline(v=seq(0,1,.25), lty=3, lwd=.5, col="gray80")#
axis(side=1, at=c(0, 0.25, 0.5, 0.75, 1), labels=c("0%", "25%", "50%", "75%", "100%"), cex.axis=0.65)#
abline(h=0.5, lty=3, lwd=.75, col="gray30")#
#
	plot(rep.BK[,"fragility"], rep.BK[,"EC.Outcome.REP"], #
		type="n", #
		yaxt="n", #
		xaxt="n", #
		xlab="") #
			text(rep.BK[,"fragility"], rep.BK[,"EC.Outcome.REP"], #
				cex=0.65, #
				labels="R", #
				col="gray70")#
			text(dem.BK[,"fragility"], dem.BK[,"EC.Outcome.DEM"], #
				cex=0.65, #
				labels="D", #
				col="gray30")#
			mtext(side=1, #
				line=2, #
				"Fragility", #
				cex=0.65)#
abline(h=seq(0,1,.125), lty=3, lwd=.5, col="gray80")#
abline(v=seq(0,15,5), lty=3, lwd=.5, col="gray80")#
axis(side=1, at=c(0, 5,10,15), labels=c(0, 5, 10,15), cex.axis=0.65)#
abline(h=0.5, lty=3, lwd=.75, col="gray30")#
# dev.off()#
######## - Figure 2: Historical Trends in Competitive States#
		cat(paste("\n", "********** Figure 2", "**********", "\n")) #
#
# pdf("scatterHistoricalCompetitiveness.pdf", width=6, height=3)#
par(mfrow=c(1,1),#
	mar=c(2.5,3,1,.25))#
	plot(summary.plusminus3[,"Year"], summary.plusminus3[,"Safe.Republican.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], #
		type="n", #
		col="gray70", #
		xlab="", #
		ylab="", #
		xaxt="n", #
		yaxt="n", #
		pch=19, #
		cex=0.65, #
		ylim=c(0,1), #
		bty="n")#
		legend(1980,1,#
			legend=c("Safe Republican", "Safe Democratic", "Battleground"), #
			lty=c(2,2,1), #
			lwd=c(3,3,5), #
			col=c("gray60", "gray80", "gray30"), #
			bg="white", #
			box.col="white", #
			cex=0.65)#
abline(h=seq(0,1,.25), lwd=.5, col="gray70", lty=3)#
axis(side=2, las=2, at=c(0,.25,.5,.75,1), labels=c("0%", "25%", "50%", "75%", "100%"), cex.axis=0.5, lwd.ticks=0, lwd=0)#
		text(seq(1868,2016,4), #
			par("usr")[3]-.05, #
			labels = seq(1868,2016,4), #
			srt = 45, #
			pos = 1, #
			xpd = TRUE, #
			cex=0.4)#
	mtext(side=2, #
		line=2.25, #
		"Percent of Electoral College", #
		cex=0.65)#
	text(summary.plusminus3[,"Year"], summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], #
		col="gray50", #
		labels="B", #
		cex=0.45)#
lines(lowess(summary.plusminus3[,"Year"], summary.plusminus3[,"Safe.Republican.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], f=0.5), lwd=3, lty=2, col="gray60")#
lines(lowess(summary.plusminus3[,"Year"], summary.plusminus3[,"Safe.Democratic.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], f=0.5), lwd=3, lty=2, col="gray80")#
lines(lowess(summary.plusminus3[,"Year"], summary.plusminus3[,"Competitive.ECvotes"]/summary.plusminus3[,"Total.ECvotes"], f=0.5), lwd=5, lty=1, col="gray30")#
# dev.off()
